// +build sqlboiler_test

// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Bundles", testBundles)
	t.Run("Caches", testCaches)
	t.Run("Escrows", testEscrows)
	t.Run("EscrowCaches", testEscrowCaches)
}

func TestDelete(t *testing.T) {
	t.Run("Bundles", testBundlesDelete)
	t.Run("Caches", testCachesDelete)
	t.Run("Escrows", testEscrowsDelete)
	t.Run("EscrowCaches", testEscrowCachesDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Bundles", testBundlesQueryDeleteAll)
	t.Run("Caches", testCachesQueryDeleteAll)
	t.Run("Escrows", testEscrowsQueryDeleteAll)
	t.Run("EscrowCaches", testEscrowCachesQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Bundles", testBundlesSliceDeleteAll)
	t.Run("Caches", testCachesSliceDeleteAll)
	t.Run("Escrows", testEscrowsSliceDeleteAll)
	t.Run("EscrowCaches", testEscrowCachesSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Bundles", testBundlesExists)
	t.Run("Caches", testCachesExists)
	t.Run("Escrows", testEscrowsExists)
	t.Run("EscrowCaches", testEscrowCachesExists)
}

func TestFind(t *testing.T) {
	t.Run("Bundles", testBundlesFind)
	t.Run("Caches", testCachesFind)
	t.Run("Escrows", testEscrowsFind)
	t.Run("EscrowCaches", testEscrowCachesFind)
}

func TestBind(t *testing.T) {
	t.Run("Bundles", testBundlesBind)
	t.Run("Caches", testCachesBind)
	t.Run("Escrows", testEscrowsBind)
	t.Run("EscrowCaches", testEscrowCachesBind)
}

func TestOne(t *testing.T) {
	t.Run("Bundles", testBundlesOne)
	t.Run("Caches", testCachesOne)
	t.Run("Escrows", testEscrowsOne)
	t.Run("EscrowCaches", testEscrowCachesOne)
}

func TestAll(t *testing.T) {
	t.Run("Bundles", testBundlesAll)
	t.Run("Caches", testCachesAll)
	t.Run("Escrows", testEscrowsAll)
	t.Run("EscrowCaches", testEscrowCachesAll)
}

func TestCount(t *testing.T) {
	t.Run("Bundles", testBundlesCount)
	t.Run("Caches", testCachesCount)
	t.Run("Escrows", testEscrowsCount)
	t.Run("EscrowCaches", testEscrowCachesCount)
}

func TestHooks(t *testing.T) {
	t.Run("Bundles", testBundlesHooks)
	t.Run("Caches", testCachesHooks)
	t.Run("Escrows", testEscrowsHooks)
	t.Run("EscrowCaches", testEscrowCachesHooks)
}

func TestInsert(t *testing.T) {
	t.Run("Bundles", testBundlesInsert)
	t.Run("Bundles", testBundlesInsertWhitelist)
	t.Run("Caches", testCachesInsert)
	t.Run("Caches", testCachesInsertWhitelist)
	t.Run("Escrows", testEscrowsInsert)
	t.Run("Escrows", testEscrowsInsertWhitelist)
	t.Run("EscrowCaches", testEscrowCachesInsert)
	t.Run("EscrowCaches", testEscrowCachesInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("BundleToEscrowUsingEscrow", testBundleToOneEscrowUsingEscrow)
	t.Run("EscrowCacheToCacheUsingCache", testEscrowCacheToOneCacheUsingCache)
	t.Run("EscrowCacheToEscrowUsingEscrow", testEscrowCacheToOneEscrowUsingEscrow)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("CacheToEscrowCaches", testCacheToManyEscrowCaches)
	t.Run("EscrowToBundles", testEscrowToManyBundles)
	t.Run("EscrowToEscrowCaches", testEscrowToManyEscrowCaches)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("BundleToEscrowUsingBundles", testBundleToOneSetOpEscrowUsingEscrow)
	t.Run("EscrowCacheToCacheUsingEscrowCaches", testEscrowCacheToOneSetOpCacheUsingCache)
	t.Run("EscrowCacheToEscrowUsingEscrowCaches", testEscrowCacheToOneSetOpEscrowUsingEscrow)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("CacheToEscrowCaches", testCacheToManyAddOpEscrowCaches)
	t.Run("EscrowToBundles", testEscrowToManyAddOpBundles)
	t.Run("EscrowToEscrowCaches", testEscrowToManyAddOpEscrowCaches)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {}

func TestReload(t *testing.T) {
	t.Run("Bundles", testBundlesReload)
	t.Run("Caches", testCachesReload)
	t.Run("Escrows", testEscrowsReload)
	t.Run("EscrowCaches", testEscrowCachesReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Bundles", testBundlesReloadAll)
	t.Run("Caches", testCachesReloadAll)
	t.Run("Escrows", testEscrowsReloadAll)
	t.Run("EscrowCaches", testEscrowCachesReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Bundles", testBundlesSelect)
	t.Run("Caches", testCachesSelect)
	t.Run("Escrows", testEscrowsSelect)
	t.Run("EscrowCaches", testEscrowCachesSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Bundles", testBundlesUpdate)
	t.Run("Caches", testCachesUpdate)
	t.Run("Escrows", testEscrowsUpdate)
	t.Run("EscrowCaches", testEscrowCachesUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Bundles", testBundlesSliceUpdateAll)
	t.Run("Caches", testCachesSliceUpdateAll)
	t.Run("Escrows", testEscrowsSliceUpdateAll)
	t.Run("EscrowCaches", testEscrowCachesSliceUpdateAll)
}
