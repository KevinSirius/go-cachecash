// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
	"github.com/volatiletech/sqlboiler/types"
)

// Bundle is an object representing the database table.
type Bundle struct {
	ID                int           `boil:"id" json:"id" toml:"id" yaml:"id"`
	EscrowID          int           `boil:"escrow_id" json:"escrow_id" toml:"escrow_id" yaml:"escrow_id"`
	BlockID           int           `boil:"block_id" json:"block_id" toml:"block_id" yaml:"block_id"`
	Raw               []byte        `boil:"raw" json:"raw" toml:"raw" yaml:"raw"`
	RequestSequenceNo types.Decimal `boil:"request_sequence_no" json:"request_sequence_no" toml:"request_sequence_no" yaml:"request_sequence_no"`
	ClientPublicKey   string        `boil:"client_public_key" json:"client_public_key" toml:"client_public_key" yaml:"client_public_key"`
	Objectid          string        `boil:"objectid" json:"objectid" toml:"objectid" yaml:"objectid"`

	R *bundleR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L bundleL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BundleColumns = struct {
	ID                string
	EscrowID          string
	BlockID           string
	Raw               string
	RequestSequenceNo string
	ClientPublicKey   string
	Objectid          string
}{
	ID:                "id",
	EscrowID:          "escrow_id",
	BlockID:           "block_id",
	Raw:               "raw",
	RequestSequenceNo: "request_sequence_no",
	ClientPublicKey:   "client_public_key",
	Objectid:          "objectid",
}

// Generated where

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

type whereHelper__byte struct{ field string }

func (w whereHelper__byte) EQ(x []byte) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelper__byte) NEQ(x []byte) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelper__byte) LT(x []byte) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelper__byte) LTE(x []byte) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelper__byte) GT(x []byte) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelper__byte) GTE(x []byte) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

type whereHelpertypes_Decimal struct{ field string }

func (w whereHelpertypes_Decimal) EQ(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertypes_Decimal) NEQ(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertypes_Decimal) LT(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertypes_Decimal) LTE(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertypes_Decimal) GT(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertypes_Decimal) GTE(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

var BundleWhere = struct {
	ID                whereHelperint
	EscrowID          whereHelperint
	BlockID           whereHelperint
	Raw               whereHelper__byte
	RequestSequenceNo whereHelpertypes_Decimal
	ClientPublicKey   whereHelperstring
	Objectid          whereHelperstring
}{
	ID:                whereHelperint{field: "\"bundle\".\"id\""},
	EscrowID:          whereHelperint{field: "\"bundle\".\"escrow_id\""},
	BlockID:           whereHelperint{field: "\"bundle\".\"block_id\""},
	Raw:               whereHelper__byte{field: "\"bundle\".\"raw\""},
	RequestSequenceNo: whereHelpertypes_Decimal{field: "\"bundle\".\"request_sequence_no\""},
	ClientPublicKey:   whereHelperstring{field: "\"bundle\".\"client_public_key\""},
	Objectid:          whereHelperstring{field: "\"bundle\".\"objectid\""},
}

// BundleRels is where relationship names are stored.
var BundleRels = struct {
	Escrow string
}{
	Escrow: "Escrow",
}

// bundleR is where relationships are stored.
type bundleR struct {
	Escrow *Escrow
}

// NewStruct creates a new relationship struct
func (*bundleR) NewStruct() *bundleR {
	return &bundleR{}
}

// bundleL is where Load methods for each relationship are stored.
type bundleL struct{}

var (
	bundleAllColumns            = []string{"id", "escrow_id", "block_id", "raw", "request_sequence_no", "client_public_key", "objectid"}
	bundleColumnsWithoutDefault = []string{"raw", "request_sequence_no", "client_public_key", "objectid"}
	bundleColumnsWithDefault    = []string{"id", "escrow_id", "block_id"}
	bundlePrimaryKeyColumns     = []string{"id"}
)

type (
	// BundleSlice is an alias for a slice of pointers to Bundle.
	// This should generally be used opposed to []Bundle.
	BundleSlice []*Bundle
	// BundleHook is the signature for custom Bundle hook methods
	BundleHook func(context.Context, boil.ContextExecutor, *Bundle) error

	bundleQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	bundleType                 = reflect.TypeOf(&Bundle{})
	bundleMapping              = queries.MakeStructMapping(bundleType)
	bundlePrimaryKeyMapping, _ = queries.BindMapping(bundleType, bundleMapping, bundlePrimaryKeyColumns)
	bundleInsertCacheMut       sync.RWMutex
	bundleInsertCache          = make(map[string]insertCache)
	bundleUpdateCacheMut       sync.RWMutex
	bundleUpdateCache          = make(map[string]updateCache)
	bundleUpsertCacheMut       sync.RWMutex
	bundleUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var bundleBeforeInsertHooks []BundleHook
var bundleBeforeUpdateHooks []BundleHook
var bundleBeforeDeleteHooks []BundleHook
var bundleBeforeUpsertHooks []BundleHook

var bundleAfterInsertHooks []BundleHook
var bundleAfterSelectHooks []BundleHook
var bundleAfterUpdateHooks []BundleHook
var bundleAfterDeleteHooks []BundleHook
var bundleAfterUpsertHooks []BundleHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Bundle) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bundleBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Bundle) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bundleBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Bundle) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bundleBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Bundle) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bundleBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Bundle) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bundleAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Bundle) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bundleAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Bundle) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bundleAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Bundle) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bundleAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Bundle) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bundleAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddBundleHook registers your hook function for all future operations.
func AddBundleHook(hookPoint boil.HookPoint, bundleHook BundleHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		bundleBeforeInsertHooks = append(bundleBeforeInsertHooks, bundleHook)
	case boil.BeforeUpdateHook:
		bundleBeforeUpdateHooks = append(bundleBeforeUpdateHooks, bundleHook)
	case boil.BeforeDeleteHook:
		bundleBeforeDeleteHooks = append(bundleBeforeDeleteHooks, bundleHook)
	case boil.BeforeUpsertHook:
		bundleBeforeUpsertHooks = append(bundleBeforeUpsertHooks, bundleHook)
	case boil.AfterInsertHook:
		bundleAfterInsertHooks = append(bundleAfterInsertHooks, bundleHook)
	case boil.AfterSelectHook:
		bundleAfterSelectHooks = append(bundleAfterSelectHooks, bundleHook)
	case boil.AfterUpdateHook:
		bundleAfterUpdateHooks = append(bundleAfterUpdateHooks, bundleHook)
	case boil.AfterDeleteHook:
		bundleAfterDeleteHooks = append(bundleAfterDeleteHooks, bundleHook)
	case boil.AfterUpsertHook:
		bundleAfterUpsertHooks = append(bundleAfterUpsertHooks, bundleHook)
	}
}

// One returns a single bundle record from the query.
func (q bundleQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Bundle, error) {
	o := &Bundle{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for bundle")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Bundle records from the query.
func (q bundleQuery) All(ctx context.Context, exec boil.ContextExecutor) (BundleSlice, error) {
	var o []*Bundle

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Bundle slice")
	}

	if len(bundleAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Bundle records in the query.
func (q bundleQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count bundle rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q bundleQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if bundle exists")
	}

	return count > 0, nil
}

// Escrow pointed to by the foreign key.
func (o *Bundle) Escrow(mods ...qm.QueryMod) escrowQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.EscrowID),
	}

	queryMods = append(queryMods, mods...)

	query := Escrows(queryMods...)
	queries.SetFrom(query.Query, "\"escrow\"")

	return query
}

// LoadEscrow allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (bundleL) LoadEscrow(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBundle interface{}, mods queries.Applicator) error {
	var slice []*Bundle
	var object *Bundle

	if singular {
		object = maybeBundle.(*Bundle)
	} else {
		slice = *maybeBundle.(*[]*Bundle)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &bundleR{}
		}
		args = append(args, object.EscrowID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &bundleR{}
			}

			for _, a := range args {
				if a == obj.EscrowID {
					continue Outer
				}
			}

			args = append(args, obj.EscrowID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`escrow`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Escrow")
	}

	var resultSlice []*Escrow
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Escrow")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for escrow")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for escrow")
	}

	if len(bundleAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Escrow = foreign
		if foreign.R == nil {
			foreign.R = &escrowR{}
		}
		foreign.R.Bundles = append(foreign.R.Bundles, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.EscrowID == foreign.ID {
				local.R.Escrow = foreign
				if foreign.R == nil {
					foreign.R = &escrowR{}
				}
				foreign.R.Bundles = append(foreign.R.Bundles, local)
				break
			}
		}
	}

	return nil
}

// SetEscrow of the bundle to the related item.
// Sets o.R.Escrow to related.
// Adds o to related.R.Bundles.
func (o *Bundle) SetEscrow(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Escrow) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"bundle\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"escrow_id"}),
		strmangle.WhereClause("\"", "\"", 2, bundlePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.EscrowID = related.ID
	if o.R == nil {
		o.R = &bundleR{
			Escrow: related,
		}
	} else {
		o.R.Escrow = related
	}

	if related.R == nil {
		related.R = &escrowR{
			Bundles: BundleSlice{o},
		}
	} else {
		related.R.Bundles = append(related.R.Bundles, o)
	}

	return nil
}

// Bundles retrieves all the records using an executor.
func Bundles(mods ...qm.QueryMod) bundleQuery {
	mods = append(mods, qm.From("\"bundle\""))
	return bundleQuery{NewQuery(mods...)}
}

// FindBundle retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBundle(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Bundle, error) {
	bundleObj := &Bundle{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"bundle\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, bundleObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from bundle")
	}

	return bundleObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Bundle) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no bundle provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(bundleColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	bundleInsertCacheMut.RLock()
	cache, cached := bundleInsertCache[key]
	bundleInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			bundleAllColumns,
			bundleColumnsWithDefault,
			bundleColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(bundleType, bundleMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(bundleType, bundleMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"bundle\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"bundle\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into bundle")
	}

	if !cached {
		bundleInsertCacheMut.Lock()
		bundleInsertCache[key] = cache
		bundleInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Bundle.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Bundle) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	bundleUpdateCacheMut.RLock()
	cache, cached := bundleUpdateCache[key]
	bundleUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			bundleAllColumns,
			bundlePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update bundle, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"bundle\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, bundlePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(bundleType, bundleMapping, append(wl, bundlePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update bundle row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for bundle")
	}

	if !cached {
		bundleUpdateCacheMut.Lock()
		bundleUpdateCache[key] = cache
		bundleUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q bundleQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for bundle")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for bundle")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BundleSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), bundlePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"bundle\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, bundlePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in bundle slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all bundle")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Bundle) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no bundle provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(bundleColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	bundleUpsertCacheMut.RLock()
	cache, cached := bundleUpsertCache[key]
	bundleUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			bundleAllColumns,
			bundleColumnsWithDefault,
			bundleColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			bundleAllColumns,
			bundlePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert bundle, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(bundlePrimaryKeyColumns))
			copy(conflict, bundlePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"bundle\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(bundleType, bundleMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(bundleType, bundleMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert bundle")
	}

	if !cached {
		bundleUpsertCacheMut.Lock()
		bundleUpsertCache[key] = cache
		bundleUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Bundle record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Bundle) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Bundle provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), bundlePrimaryKeyMapping)
	sql := "DELETE FROM \"bundle\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from bundle")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for bundle")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q bundleQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no bundleQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from bundle")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for bundle")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BundleSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(bundleBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), bundlePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"bundle\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, bundlePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from bundle slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for bundle")
	}

	if len(bundleAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Bundle) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindBundle(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BundleSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BundleSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), bundlePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"bundle\".* FROM \"bundle\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, bundlePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in BundleSlice")
	}

	*o = slice

	return nil
}

// BundleExists checks if the Bundle row exists.
func BundleExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"bundle\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if bundle exists")
	}

	return exists, nil
}
