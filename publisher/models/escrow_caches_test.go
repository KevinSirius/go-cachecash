// +build sqlboiler_test

// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testEscrowCaches(t *testing.T) {
	t.Parallel()

	query := EscrowCaches()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testEscrowCachesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EscrowCache{}
	if err = randomize.Struct(seed, o, escrowCacheDBTypes, true, escrowCacheColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EscrowCache struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := EscrowCaches().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testEscrowCachesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EscrowCache{}
	if err = randomize.Struct(seed, o, escrowCacheDBTypes, true, escrowCacheColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EscrowCache struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := EscrowCaches().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := EscrowCaches().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testEscrowCachesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EscrowCache{}
	if err = randomize.Struct(seed, o, escrowCacheDBTypes, true, escrowCacheColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EscrowCache struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := EscrowCacheSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := EscrowCaches().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testEscrowCachesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EscrowCache{}
	if err = randomize.Struct(seed, o, escrowCacheDBTypes, true, escrowCacheColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EscrowCache struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := EscrowCacheExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if EscrowCache exists: %s", err)
	}
	if !e {
		t.Errorf("Expected EscrowCacheExists to return true, but got false.")
	}
}

func testEscrowCachesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EscrowCache{}
	if err = randomize.Struct(seed, o, escrowCacheDBTypes, true, escrowCacheColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EscrowCache struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	escrowCacheFound, err := FindEscrowCache(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if escrowCacheFound == nil {
		t.Error("want a record, got nil")
	}
}

func testEscrowCachesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EscrowCache{}
	if err = randomize.Struct(seed, o, escrowCacheDBTypes, true, escrowCacheColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EscrowCache struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = EscrowCaches().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testEscrowCachesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EscrowCache{}
	if err = randomize.Struct(seed, o, escrowCacheDBTypes, true, escrowCacheColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EscrowCache struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := EscrowCaches().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testEscrowCachesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	escrowCacheOne := &EscrowCache{}
	escrowCacheTwo := &EscrowCache{}
	if err = randomize.Struct(seed, escrowCacheOne, escrowCacheDBTypes, false, escrowCacheColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EscrowCache struct: %s", err)
	}
	if err = randomize.Struct(seed, escrowCacheTwo, escrowCacheDBTypes, false, escrowCacheColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EscrowCache struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = escrowCacheOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = escrowCacheTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := EscrowCaches().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testEscrowCachesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	escrowCacheOne := &EscrowCache{}
	escrowCacheTwo := &EscrowCache{}
	if err = randomize.Struct(seed, escrowCacheOne, escrowCacheDBTypes, false, escrowCacheColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EscrowCache struct: %s", err)
	}
	if err = randomize.Struct(seed, escrowCacheTwo, escrowCacheDBTypes, false, escrowCacheColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EscrowCache struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = escrowCacheOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = escrowCacheTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := EscrowCaches().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func escrowCacheBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *EscrowCache) error {
	*o = EscrowCache{}
	return nil
}

func escrowCacheAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *EscrowCache) error {
	*o = EscrowCache{}
	return nil
}

func escrowCacheAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *EscrowCache) error {
	*o = EscrowCache{}
	return nil
}

func escrowCacheBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *EscrowCache) error {
	*o = EscrowCache{}
	return nil
}

func escrowCacheAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *EscrowCache) error {
	*o = EscrowCache{}
	return nil
}

func escrowCacheBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *EscrowCache) error {
	*o = EscrowCache{}
	return nil
}

func escrowCacheAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *EscrowCache) error {
	*o = EscrowCache{}
	return nil
}

func escrowCacheBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *EscrowCache) error {
	*o = EscrowCache{}
	return nil
}

func escrowCacheAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *EscrowCache) error {
	*o = EscrowCache{}
	return nil
}

func testEscrowCachesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &EscrowCache{}
	o := &EscrowCache{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, escrowCacheDBTypes, false); err != nil {
		t.Errorf("Unable to randomize EscrowCache object: %s", err)
	}

	AddEscrowCacheHook(boil.BeforeInsertHook, escrowCacheBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	escrowCacheBeforeInsertHooks = []EscrowCacheHook{}

	AddEscrowCacheHook(boil.AfterInsertHook, escrowCacheAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	escrowCacheAfterInsertHooks = []EscrowCacheHook{}

	AddEscrowCacheHook(boil.AfterSelectHook, escrowCacheAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	escrowCacheAfterSelectHooks = []EscrowCacheHook{}

	AddEscrowCacheHook(boil.BeforeUpdateHook, escrowCacheBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	escrowCacheBeforeUpdateHooks = []EscrowCacheHook{}

	AddEscrowCacheHook(boil.AfterUpdateHook, escrowCacheAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	escrowCacheAfterUpdateHooks = []EscrowCacheHook{}

	AddEscrowCacheHook(boil.BeforeDeleteHook, escrowCacheBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	escrowCacheBeforeDeleteHooks = []EscrowCacheHook{}

	AddEscrowCacheHook(boil.AfterDeleteHook, escrowCacheAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	escrowCacheAfterDeleteHooks = []EscrowCacheHook{}

	AddEscrowCacheHook(boil.BeforeUpsertHook, escrowCacheBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	escrowCacheBeforeUpsertHooks = []EscrowCacheHook{}

	AddEscrowCacheHook(boil.AfterUpsertHook, escrowCacheAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	escrowCacheAfterUpsertHooks = []EscrowCacheHook{}
}

func testEscrowCachesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EscrowCache{}
	if err = randomize.Struct(seed, o, escrowCacheDBTypes, true, escrowCacheColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EscrowCache struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := EscrowCaches().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testEscrowCachesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EscrowCache{}
	if err = randomize.Struct(seed, o, escrowCacheDBTypes, true); err != nil {
		t.Errorf("Unable to randomize EscrowCache struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(escrowCacheColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := EscrowCaches().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testEscrowCacheToOneCacheUsingCache(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local EscrowCache
	var foreign Cache

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, escrowCacheDBTypes, false, escrowCacheColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EscrowCache struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, cacheDBTypes, false, cacheColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Cache struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.CacheID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Cache().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := EscrowCacheSlice{&local}
	if err = local.L.LoadCache(ctx, tx, false, (*[]*EscrowCache)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Cache == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Cache = nil
	if err = local.L.LoadCache(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Cache == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testEscrowCacheToOneEscrowUsingEscrow(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local EscrowCache
	var foreign Escrow

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, escrowCacheDBTypes, false, escrowCacheColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EscrowCache struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, escrowDBTypes, false, escrowColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Escrow struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.EscrowID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Escrow().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := EscrowCacheSlice{&local}
	if err = local.L.LoadEscrow(ctx, tx, false, (*[]*EscrowCache)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Escrow == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Escrow = nil
	if err = local.L.LoadEscrow(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Escrow == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testEscrowCacheToOneSetOpCacheUsingCache(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a EscrowCache
	var b, c Cache

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, escrowCacheDBTypes, false, strmangle.SetComplement(escrowCachePrimaryKeyColumns, escrowCacheColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, cacheDBTypes, false, strmangle.SetComplement(cachePrimaryKeyColumns, cacheColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, cacheDBTypes, false, strmangle.SetComplement(cachePrimaryKeyColumns, cacheColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Cache{&b, &c} {
		err = a.SetCache(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Cache != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.EscrowCaches[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.CacheID != x.ID {
			t.Error("foreign key was wrong value", a.CacheID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.CacheID))
		reflect.Indirect(reflect.ValueOf(&a.CacheID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.CacheID != x.ID {
			t.Error("foreign key was wrong value", a.CacheID, x.ID)
		}
	}
}
func testEscrowCacheToOneSetOpEscrowUsingEscrow(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a EscrowCache
	var b, c Escrow

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, escrowCacheDBTypes, false, strmangle.SetComplement(escrowCachePrimaryKeyColumns, escrowCacheColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, escrowDBTypes, false, strmangle.SetComplement(escrowPrimaryKeyColumns, escrowColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, escrowDBTypes, false, strmangle.SetComplement(escrowPrimaryKeyColumns, escrowColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Escrow{&b, &c} {
		err = a.SetEscrow(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Escrow != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.EscrowCaches[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.EscrowID != x.ID {
			t.Error("foreign key was wrong value", a.EscrowID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.EscrowID))
		reflect.Indirect(reflect.ValueOf(&a.EscrowID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.EscrowID != x.ID {
			t.Error("foreign key was wrong value", a.EscrowID, x.ID)
		}
	}
}

func testEscrowCachesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EscrowCache{}
	if err = randomize.Struct(seed, o, escrowCacheDBTypes, true, escrowCacheColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EscrowCache struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testEscrowCachesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EscrowCache{}
	if err = randomize.Struct(seed, o, escrowCacheDBTypes, true, escrowCacheColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EscrowCache struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := EscrowCacheSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testEscrowCachesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EscrowCache{}
	if err = randomize.Struct(seed, o, escrowCacheDBTypes, true, escrowCacheColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EscrowCache struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := EscrowCaches().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	escrowCacheDBTypes = map[string]string{`ID`: `integer`, `EscrowID`: `integer`, `CacheID`: `integer`, `InnerMasterKey`: `bytea`}
	_                  = bytes.MinRead
)

func testEscrowCachesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(escrowCachePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(escrowCacheAllColumns) == len(escrowCachePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &EscrowCache{}
	if err = randomize.Struct(seed, o, escrowCacheDBTypes, true, escrowCacheColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EscrowCache struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := EscrowCaches().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, escrowCacheDBTypes, true, escrowCachePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize EscrowCache struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testEscrowCachesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(escrowCacheAllColumns) == len(escrowCachePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &EscrowCache{}
	if err = randomize.Struct(seed, o, escrowCacheDBTypes, true, escrowCacheColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EscrowCache struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := EscrowCaches().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, escrowCacheDBTypes, true, escrowCachePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize EscrowCache struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(escrowCacheAllColumns, escrowCachePrimaryKeyColumns) {
		fields = escrowCacheAllColumns
	} else {
		fields = strmangle.SetComplement(
			escrowCacheAllColumns,
			escrowCachePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := EscrowCacheSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testEscrowCachesUpsert(t *testing.T) {
	t.Parallel()

	if len(escrowCacheAllColumns) == len(escrowCachePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := EscrowCache{}
	if err = randomize.Struct(seed, &o, escrowCacheDBTypes, true); err != nil {
		t.Errorf("Unable to randomize EscrowCache struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert EscrowCache: %s", err)
	}

	count, err := EscrowCaches().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, escrowCacheDBTypes, false, escrowCachePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize EscrowCache struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert EscrowCache: %s", err)
	}

	count, err = EscrowCaches().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
