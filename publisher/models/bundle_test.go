// +build sqlboiler_test

// Code generated by SQLBoiler 3.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testBundles(t *testing.T) {
	t.Parallel()

	query := Bundles()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testBundlesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Bundle{}
	if err = randomize.Struct(seed, o, bundleDBTypes, true, bundleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Bundle struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Bundles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBundlesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Bundle{}
	if err = randomize.Struct(seed, o, bundleDBTypes, true, bundleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Bundle struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Bundles().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Bundles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBundlesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Bundle{}
	if err = randomize.Struct(seed, o, bundleDBTypes, true, bundleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Bundle struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := BundleSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Bundles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBundlesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Bundle{}
	if err = randomize.Struct(seed, o, bundleDBTypes, true, bundleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Bundle struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := BundleExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Bundle exists: %s", err)
	}
	if !e {
		t.Errorf("Expected BundleExists to return true, but got false.")
	}
}

func testBundlesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Bundle{}
	if err = randomize.Struct(seed, o, bundleDBTypes, true, bundleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Bundle struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	bundleFound, err := FindBundle(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if bundleFound == nil {
		t.Error("want a record, got nil")
	}
}

func testBundlesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Bundle{}
	if err = randomize.Struct(seed, o, bundleDBTypes, true, bundleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Bundle struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Bundles().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testBundlesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Bundle{}
	if err = randomize.Struct(seed, o, bundleDBTypes, true, bundleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Bundle struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Bundles().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testBundlesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	bundleOne := &Bundle{}
	bundleTwo := &Bundle{}
	if err = randomize.Struct(seed, bundleOne, bundleDBTypes, false, bundleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Bundle struct: %s", err)
	}
	if err = randomize.Struct(seed, bundleTwo, bundleDBTypes, false, bundleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Bundle struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = bundleOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = bundleTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Bundles().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testBundlesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	bundleOne := &Bundle{}
	bundleTwo := &Bundle{}
	if err = randomize.Struct(seed, bundleOne, bundleDBTypes, false, bundleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Bundle struct: %s", err)
	}
	if err = randomize.Struct(seed, bundleTwo, bundleDBTypes, false, bundleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Bundle struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = bundleOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = bundleTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Bundles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func bundleBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Bundle) error {
	*o = Bundle{}
	return nil
}

func bundleAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Bundle) error {
	*o = Bundle{}
	return nil
}

func bundleAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Bundle) error {
	*o = Bundle{}
	return nil
}

func bundleBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Bundle) error {
	*o = Bundle{}
	return nil
}

func bundleAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Bundle) error {
	*o = Bundle{}
	return nil
}

func bundleBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Bundle) error {
	*o = Bundle{}
	return nil
}

func bundleAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Bundle) error {
	*o = Bundle{}
	return nil
}

func bundleBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Bundle) error {
	*o = Bundle{}
	return nil
}

func bundleAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Bundle) error {
	*o = Bundle{}
	return nil
}

func testBundlesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Bundle{}
	o := &Bundle{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, bundleDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Bundle object: %s", err)
	}

	AddBundleHook(boil.BeforeInsertHook, bundleBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	bundleBeforeInsertHooks = []BundleHook{}

	AddBundleHook(boil.AfterInsertHook, bundleAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	bundleAfterInsertHooks = []BundleHook{}

	AddBundleHook(boil.AfterSelectHook, bundleAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	bundleAfterSelectHooks = []BundleHook{}

	AddBundleHook(boil.BeforeUpdateHook, bundleBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	bundleBeforeUpdateHooks = []BundleHook{}

	AddBundleHook(boil.AfterUpdateHook, bundleAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	bundleAfterUpdateHooks = []BundleHook{}

	AddBundleHook(boil.BeforeDeleteHook, bundleBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	bundleBeforeDeleteHooks = []BundleHook{}

	AddBundleHook(boil.AfterDeleteHook, bundleAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	bundleAfterDeleteHooks = []BundleHook{}

	AddBundleHook(boil.BeforeUpsertHook, bundleBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	bundleBeforeUpsertHooks = []BundleHook{}

	AddBundleHook(boil.AfterUpsertHook, bundleAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	bundleAfterUpsertHooks = []BundleHook{}
}

func testBundlesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Bundle{}
	if err = randomize.Struct(seed, o, bundleDBTypes, true, bundleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Bundle struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Bundles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testBundlesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Bundle{}
	if err = randomize.Struct(seed, o, bundleDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Bundle struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(bundleColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Bundles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testBundleToOneEscrowUsingEscrow(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Bundle
	var foreign Escrow

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, bundleDBTypes, false, bundleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Bundle struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, escrowDBTypes, false, escrowColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Escrow struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.EscrowID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Escrow().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := BundleSlice{&local}
	if err = local.L.LoadEscrow(ctx, tx, false, (*[]*Bundle)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Escrow == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Escrow = nil
	if err = local.L.LoadEscrow(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Escrow == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testBundleToOneSetOpEscrowUsingEscrow(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Bundle
	var b, c Escrow

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, bundleDBTypes, false, strmangle.SetComplement(bundlePrimaryKeyColumns, bundleColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, escrowDBTypes, false, strmangle.SetComplement(escrowPrimaryKeyColumns, escrowColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, escrowDBTypes, false, strmangle.SetComplement(escrowPrimaryKeyColumns, escrowColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Escrow{&b, &c} {
		err = a.SetEscrow(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Escrow != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Bundles[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.EscrowID != x.ID {
			t.Error("foreign key was wrong value", a.EscrowID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.EscrowID))
		reflect.Indirect(reflect.ValueOf(&a.EscrowID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.EscrowID != x.ID {
			t.Error("foreign key was wrong value", a.EscrowID, x.ID)
		}
	}
}

func testBundlesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Bundle{}
	if err = randomize.Struct(seed, o, bundleDBTypes, true, bundleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Bundle struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testBundlesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Bundle{}
	if err = randomize.Struct(seed, o, bundleDBTypes, true, bundleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Bundle struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := BundleSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testBundlesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Bundle{}
	if err = randomize.Struct(seed, o, bundleDBTypes, true, bundleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Bundle struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Bundles().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	bundleDBTypes = map[string]string{`ID`: `integer`, `EscrowID`: `integer`, `BlockID`: `integer`, `Raw`: `bytea`, `RequestSequenceNo`: `integer`, `ClientPublicKey`: `character varying`, `Objectid`: `character varying`}
	_             = bytes.MinRead
)

func testBundlesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(bundlePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(bundleAllColumns) == len(bundlePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Bundle{}
	if err = randomize.Struct(seed, o, bundleDBTypes, true, bundleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Bundle struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Bundles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, bundleDBTypes, true, bundlePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Bundle struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testBundlesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(bundleAllColumns) == len(bundlePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Bundle{}
	if err = randomize.Struct(seed, o, bundleDBTypes, true, bundleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Bundle struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Bundles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, bundleDBTypes, true, bundlePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Bundle struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(bundleAllColumns, bundlePrimaryKeyColumns) {
		fields = bundleAllColumns
	} else {
		fields = strmangle.SetComplement(
			bundleAllColumns,
			bundlePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := BundleSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testBundlesUpsert(t *testing.T) {
	t.Parallel()

	if len(bundleAllColumns) == len(bundlePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Bundle{}
	if err = randomize.Struct(seed, &o, bundleDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Bundle struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Bundle: %s", err)
	}

	count, err := Bundles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, bundleDBTypes, false, bundlePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Bundle struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Bundle: %s", err)
	}

	count, err = Bundles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
