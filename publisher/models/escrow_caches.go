// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// EscrowCache is an object representing the database table.
type EscrowCache struct {
	ID             int    `boil:"id" json:"id" toml:"id" yaml:"id"`
	EscrowID       int    `boil:"escrow_id" json:"escrow_id" toml:"escrow_id" yaml:"escrow_id"`
	CacheID        int    `boil:"cache_id" json:"cache_id" toml:"cache_id" yaml:"cache_id"`
	InnerMasterKey []byte `boil:"inner_master_key" json:"inner_master_key" toml:"inner_master_key" yaml:"inner_master_key"`

	R *escrowCacheR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L escrowCacheL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var EscrowCacheColumns = struct {
	ID             string
	EscrowID       string
	CacheID        string
	InnerMasterKey string
}{
	ID:             "id",
	EscrowID:       "escrow_id",
	CacheID:        "cache_id",
	InnerMasterKey: "inner_master_key",
}

// Generated where

var EscrowCacheWhere = struct {
	ID             whereHelperint
	EscrowID       whereHelperint
	CacheID        whereHelperint
	InnerMasterKey whereHelper__byte
}{
	ID:             whereHelperint{field: "\"escrow_caches\".\"id\""},
	EscrowID:       whereHelperint{field: "\"escrow_caches\".\"escrow_id\""},
	CacheID:        whereHelperint{field: "\"escrow_caches\".\"cache_id\""},
	InnerMasterKey: whereHelper__byte{field: "\"escrow_caches\".\"inner_master_key\""},
}

// EscrowCacheRels is where relationship names are stored.
var EscrowCacheRels = struct {
	Cache  string
	Escrow string
}{
	Cache:  "Cache",
	Escrow: "Escrow",
}

// escrowCacheR is where relationships are stored.
type escrowCacheR struct {
	Cache  *Cache
	Escrow *Escrow
}

// NewStruct creates a new relationship struct
func (*escrowCacheR) NewStruct() *escrowCacheR {
	return &escrowCacheR{}
}

// escrowCacheL is where Load methods for each relationship are stored.
type escrowCacheL struct{}

var (
	escrowCacheAllColumns            = []string{"id", "escrow_id", "cache_id", "inner_master_key"}
	escrowCacheColumnsWithoutDefault = []string{"inner_master_key"}
	escrowCacheColumnsWithDefault    = []string{"id", "escrow_id", "cache_id"}
	escrowCachePrimaryKeyColumns     = []string{"id"}
)

type (
	// EscrowCacheSlice is an alias for a slice of pointers to EscrowCache.
	// This should generally be used opposed to []EscrowCache.
	EscrowCacheSlice []*EscrowCache
	// EscrowCacheHook is the signature for custom EscrowCache hook methods
	EscrowCacheHook func(context.Context, boil.ContextExecutor, *EscrowCache) error

	escrowCacheQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	escrowCacheType                 = reflect.TypeOf(&EscrowCache{})
	escrowCacheMapping              = queries.MakeStructMapping(escrowCacheType)
	escrowCachePrimaryKeyMapping, _ = queries.BindMapping(escrowCacheType, escrowCacheMapping, escrowCachePrimaryKeyColumns)
	escrowCacheInsertCacheMut       sync.RWMutex
	escrowCacheInsertCache          = make(map[string]insertCache)
	escrowCacheUpdateCacheMut       sync.RWMutex
	escrowCacheUpdateCache          = make(map[string]updateCache)
	escrowCacheUpsertCacheMut       sync.RWMutex
	escrowCacheUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var escrowCacheBeforeInsertHooks []EscrowCacheHook
var escrowCacheBeforeUpdateHooks []EscrowCacheHook
var escrowCacheBeforeDeleteHooks []EscrowCacheHook
var escrowCacheBeforeUpsertHooks []EscrowCacheHook

var escrowCacheAfterInsertHooks []EscrowCacheHook
var escrowCacheAfterSelectHooks []EscrowCacheHook
var escrowCacheAfterUpdateHooks []EscrowCacheHook
var escrowCacheAfterDeleteHooks []EscrowCacheHook
var escrowCacheAfterUpsertHooks []EscrowCacheHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *EscrowCache) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range escrowCacheBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *EscrowCache) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range escrowCacheBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *EscrowCache) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range escrowCacheBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *EscrowCache) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range escrowCacheBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *EscrowCache) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range escrowCacheAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *EscrowCache) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range escrowCacheAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *EscrowCache) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range escrowCacheAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *EscrowCache) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range escrowCacheAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *EscrowCache) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range escrowCacheAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddEscrowCacheHook registers your hook function for all future operations.
func AddEscrowCacheHook(hookPoint boil.HookPoint, escrowCacheHook EscrowCacheHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		escrowCacheBeforeInsertHooks = append(escrowCacheBeforeInsertHooks, escrowCacheHook)
	case boil.BeforeUpdateHook:
		escrowCacheBeforeUpdateHooks = append(escrowCacheBeforeUpdateHooks, escrowCacheHook)
	case boil.BeforeDeleteHook:
		escrowCacheBeforeDeleteHooks = append(escrowCacheBeforeDeleteHooks, escrowCacheHook)
	case boil.BeforeUpsertHook:
		escrowCacheBeforeUpsertHooks = append(escrowCacheBeforeUpsertHooks, escrowCacheHook)
	case boil.AfterInsertHook:
		escrowCacheAfterInsertHooks = append(escrowCacheAfterInsertHooks, escrowCacheHook)
	case boil.AfterSelectHook:
		escrowCacheAfterSelectHooks = append(escrowCacheAfterSelectHooks, escrowCacheHook)
	case boil.AfterUpdateHook:
		escrowCacheAfterUpdateHooks = append(escrowCacheAfterUpdateHooks, escrowCacheHook)
	case boil.AfterDeleteHook:
		escrowCacheAfterDeleteHooks = append(escrowCacheAfterDeleteHooks, escrowCacheHook)
	case boil.AfterUpsertHook:
		escrowCacheAfterUpsertHooks = append(escrowCacheAfterUpsertHooks, escrowCacheHook)
	}
}

// One returns a single escrowCache record from the query.
func (q escrowCacheQuery) One(ctx context.Context, exec boil.ContextExecutor) (*EscrowCache, error) {
	o := &EscrowCache{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for escrow_caches")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all EscrowCache records from the query.
func (q escrowCacheQuery) All(ctx context.Context, exec boil.ContextExecutor) (EscrowCacheSlice, error) {
	var o []*EscrowCache

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to EscrowCache slice")
	}

	if len(escrowCacheAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all EscrowCache records in the query.
func (q escrowCacheQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count escrow_caches rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q escrowCacheQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if escrow_caches exists")
	}

	return count > 0, nil
}

// Cache pointed to by the foreign key.
func (o *EscrowCache) Cache(mods ...qm.QueryMod) cacheQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.CacheID),
	}

	queryMods = append(queryMods, mods...)

	query := Caches(queryMods...)
	queries.SetFrom(query.Query, "\"cache\"")

	return query
}

// Escrow pointed to by the foreign key.
func (o *EscrowCache) Escrow(mods ...qm.QueryMod) escrowQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.EscrowID),
	}

	queryMods = append(queryMods, mods...)

	query := Escrows(queryMods...)
	queries.SetFrom(query.Query, "\"escrow\"")

	return query
}

// LoadCache allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (escrowCacheL) LoadCache(ctx context.Context, e boil.ContextExecutor, singular bool, maybeEscrowCache interface{}, mods queries.Applicator) error {
	var slice []*EscrowCache
	var object *EscrowCache

	if singular {
		object = maybeEscrowCache.(*EscrowCache)
	} else {
		slice = *maybeEscrowCache.(*[]*EscrowCache)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &escrowCacheR{}
		}
		args = append(args, object.CacheID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &escrowCacheR{}
			}

			for _, a := range args {
				if a == obj.CacheID {
					continue Outer
				}
			}

			args = append(args, obj.CacheID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`cache`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Cache")
	}

	var resultSlice []*Cache
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Cache")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for cache")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for cache")
	}

	if len(escrowCacheAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Cache = foreign
		if foreign.R == nil {
			foreign.R = &cacheR{}
		}
		foreign.R.EscrowCaches = append(foreign.R.EscrowCaches, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CacheID == foreign.ID {
				local.R.Cache = foreign
				if foreign.R == nil {
					foreign.R = &cacheR{}
				}
				foreign.R.EscrowCaches = append(foreign.R.EscrowCaches, local)
				break
			}
		}
	}

	return nil
}

// LoadEscrow allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (escrowCacheL) LoadEscrow(ctx context.Context, e boil.ContextExecutor, singular bool, maybeEscrowCache interface{}, mods queries.Applicator) error {
	var slice []*EscrowCache
	var object *EscrowCache

	if singular {
		object = maybeEscrowCache.(*EscrowCache)
	} else {
		slice = *maybeEscrowCache.(*[]*EscrowCache)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &escrowCacheR{}
		}
		args = append(args, object.EscrowID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &escrowCacheR{}
			}

			for _, a := range args {
				if a == obj.EscrowID {
					continue Outer
				}
			}

			args = append(args, obj.EscrowID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`escrow`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Escrow")
	}

	var resultSlice []*Escrow
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Escrow")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for escrow")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for escrow")
	}

	if len(escrowCacheAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Escrow = foreign
		if foreign.R == nil {
			foreign.R = &escrowR{}
		}
		foreign.R.EscrowCaches = append(foreign.R.EscrowCaches, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.EscrowID == foreign.ID {
				local.R.Escrow = foreign
				if foreign.R == nil {
					foreign.R = &escrowR{}
				}
				foreign.R.EscrowCaches = append(foreign.R.EscrowCaches, local)
				break
			}
		}
	}

	return nil
}

// SetCache of the escrowCache to the related item.
// Sets o.R.Cache to related.
// Adds o to related.R.EscrowCaches.
func (o *EscrowCache) SetCache(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Cache) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"escrow_caches\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"cache_id"}),
		strmangle.WhereClause("\"", "\"", 2, escrowCachePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CacheID = related.ID
	if o.R == nil {
		o.R = &escrowCacheR{
			Cache: related,
		}
	} else {
		o.R.Cache = related
	}

	if related.R == nil {
		related.R = &cacheR{
			EscrowCaches: EscrowCacheSlice{o},
		}
	} else {
		related.R.EscrowCaches = append(related.R.EscrowCaches, o)
	}

	return nil
}

// SetEscrow of the escrowCache to the related item.
// Sets o.R.Escrow to related.
// Adds o to related.R.EscrowCaches.
func (o *EscrowCache) SetEscrow(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Escrow) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"escrow_caches\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"escrow_id"}),
		strmangle.WhereClause("\"", "\"", 2, escrowCachePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.EscrowID = related.ID
	if o.R == nil {
		o.R = &escrowCacheR{
			Escrow: related,
		}
	} else {
		o.R.Escrow = related
	}

	if related.R == nil {
		related.R = &escrowR{
			EscrowCaches: EscrowCacheSlice{o},
		}
	} else {
		related.R.EscrowCaches = append(related.R.EscrowCaches, o)
	}

	return nil
}

// EscrowCaches retrieves all the records using an executor.
func EscrowCaches(mods ...qm.QueryMod) escrowCacheQuery {
	mods = append(mods, qm.From("\"escrow_caches\""))
	return escrowCacheQuery{NewQuery(mods...)}
}

// FindEscrowCache retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindEscrowCache(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*EscrowCache, error) {
	escrowCacheObj := &EscrowCache{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"escrow_caches\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, escrowCacheObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from escrow_caches")
	}

	return escrowCacheObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *EscrowCache) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no escrow_caches provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(escrowCacheColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	escrowCacheInsertCacheMut.RLock()
	cache, cached := escrowCacheInsertCache[key]
	escrowCacheInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			escrowCacheAllColumns,
			escrowCacheColumnsWithDefault,
			escrowCacheColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(escrowCacheType, escrowCacheMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(escrowCacheType, escrowCacheMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"escrow_caches\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"escrow_caches\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into escrow_caches")
	}

	if !cached {
		escrowCacheInsertCacheMut.Lock()
		escrowCacheInsertCache[key] = cache
		escrowCacheInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the EscrowCache.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *EscrowCache) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	escrowCacheUpdateCacheMut.RLock()
	cache, cached := escrowCacheUpdateCache[key]
	escrowCacheUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			escrowCacheAllColumns,
			escrowCachePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update escrow_caches, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"escrow_caches\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, escrowCachePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(escrowCacheType, escrowCacheMapping, append(wl, escrowCachePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update escrow_caches row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for escrow_caches")
	}

	if !cached {
		escrowCacheUpdateCacheMut.Lock()
		escrowCacheUpdateCache[key] = cache
		escrowCacheUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q escrowCacheQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for escrow_caches")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for escrow_caches")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o EscrowCacheSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), escrowCachePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"escrow_caches\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, escrowCachePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in escrowCache slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all escrowCache")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *EscrowCache) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no escrow_caches provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(escrowCacheColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	escrowCacheUpsertCacheMut.RLock()
	cache, cached := escrowCacheUpsertCache[key]
	escrowCacheUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			escrowCacheAllColumns,
			escrowCacheColumnsWithDefault,
			escrowCacheColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			escrowCacheAllColumns,
			escrowCachePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert escrow_caches, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(escrowCachePrimaryKeyColumns))
			copy(conflict, escrowCachePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"escrow_caches\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(escrowCacheType, escrowCacheMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(escrowCacheType, escrowCacheMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert escrow_caches")
	}

	if !cached {
		escrowCacheUpsertCacheMut.Lock()
		escrowCacheUpsertCache[key] = cache
		escrowCacheUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single EscrowCache record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *EscrowCache) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no EscrowCache provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), escrowCachePrimaryKeyMapping)
	sql := "DELETE FROM \"escrow_caches\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from escrow_caches")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for escrow_caches")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q escrowCacheQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no escrowCacheQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from escrow_caches")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for escrow_caches")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o EscrowCacheSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(escrowCacheBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), escrowCachePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"escrow_caches\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, escrowCachePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from escrowCache slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for escrow_caches")
	}

	if len(escrowCacheAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *EscrowCache) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindEscrowCache(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *EscrowCacheSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := EscrowCacheSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), escrowCachePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"escrow_caches\".* FROM \"escrow_caches\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, escrowCachePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in EscrowCacheSlice")
	}

	*o = slice

	return nil
}

// EscrowCacheExists checks if the EscrowCache row exists.
func EscrowCacheExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"escrow_caches\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if escrow_caches exists")
	}

	return exists, nil
}
