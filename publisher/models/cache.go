// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
	"golang.org/x/crypto/ed25519"
	"net"
)

// Cache is an object representing the database table.
type Cache struct {
	ID        int               `boil:"id" json:"id" toml:"id" yaml:"id"`
	PublicKey ed25519.PublicKey `boil:"public_key" json:"public_key" toml:"public_key" yaml:"public_key"`
	Inetaddr  net.IP            `boil:"inetaddr" json:"inetaddr" toml:"inetaddr" yaml:"inetaddr"`
	Inet6addr net.IP            `boil:"inet6addr" json:"inet6addr" toml:"inet6addr" yaml:"inet6addr"`
	Port      uint32            `boil:"port" json:"port" toml:"port" yaml:"port"`

	R *cacheR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L cacheL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CacheColumns = struct {
	ID        string
	PublicKey string
	Inetaddr  string
	Inet6addr string
	Port      string
}{
	ID:        "id",
	PublicKey: "public_key",
	Inetaddr:  "inetaddr",
	Inet6addr: "inet6addr",
	Port:      "port",
}

// Generated where

type whereHelpered25519_PublicKey struct{ field string }

func (w whereHelpered25519_PublicKey) EQ(x ed25519.PublicKey) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpered25519_PublicKey) NEQ(x ed25519.PublicKey) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpered25519_PublicKey) LT(x ed25519.PublicKey) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpered25519_PublicKey) LTE(x ed25519.PublicKey) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpered25519_PublicKey) GT(x ed25519.PublicKey) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpered25519_PublicKey) GTE(x ed25519.PublicKey) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpernet_IP struct{ field string }

func (w whereHelpernet_IP) EQ(x net.IP) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelpernet_IP) NEQ(x net.IP) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelpernet_IP) LT(x net.IP) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelpernet_IP) LTE(x net.IP) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelpernet_IP) GT(x net.IP) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelpernet_IP) GTE(x net.IP) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

type whereHelperuint32 struct{ field string }

func (w whereHelperuint32) EQ(x uint32) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperuint32) NEQ(x uint32) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperuint32) LT(x uint32) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperuint32) LTE(x uint32) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperuint32) GT(x uint32) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperuint32) GTE(x uint32) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

var CacheWhere = struct {
	ID        whereHelperint
	PublicKey whereHelpered25519_PublicKey
	Inetaddr  whereHelpernet_IP
	Inet6addr whereHelpernet_IP
	Port      whereHelperuint32
}{
	ID:        whereHelperint{field: "\"cache\".\"id\""},
	PublicKey: whereHelpered25519_PublicKey{field: "\"cache\".\"public_key\""},
	Inetaddr:  whereHelpernet_IP{field: "\"cache\".\"inetaddr\""},
	Inet6addr: whereHelpernet_IP{field: "\"cache\".\"inet6addr\""},
	Port:      whereHelperuint32{field: "\"cache\".\"port\""},
}

// CacheRels is where relationship names are stored.
var CacheRels = struct {
	EscrowCaches string
}{
	EscrowCaches: "EscrowCaches",
}

// cacheR is where relationships are stored.
type cacheR struct {
	EscrowCaches EscrowCacheSlice
}

// NewStruct creates a new relationship struct
func (*cacheR) NewStruct() *cacheR {
	return &cacheR{}
}

// cacheL is where Load methods for each relationship are stored.
type cacheL struct{}

var (
	cacheAllColumns            = []string{"id", "public_key", "inetaddr", "inet6addr", "port"}
	cacheColumnsWithoutDefault = []string{"public_key", "inetaddr", "inet6addr", "port"}
	cacheColumnsWithDefault    = []string{"id"}
	cachePrimaryKeyColumns     = []string{"id"}
)

type (
	// CacheSlice is an alias for a slice of pointers to Cache.
	// This should generally be used opposed to []Cache.
	CacheSlice []*Cache
	// CacheHook is the signature for custom Cache hook methods
	CacheHook func(context.Context, boil.ContextExecutor, *Cache) error

	cacheQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	cacheType                 = reflect.TypeOf(&Cache{})
	cacheMapping              = queries.MakeStructMapping(cacheType)
	cachePrimaryKeyMapping, _ = queries.BindMapping(cacheType, cacheMapping, cachePrimaryKeyColumns)
	cacheInsertCacheMut       sync.RWMutex
	cacheInsertCache          = make(map[string]insertCache)
	cacheUpdateCacheMut       sync.RWMutex
	cacheUpdateCache          = make(map[string]updateCache)
	cacheUpsertCacheMut       sync.RWMutex
	cacheUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var cacheBeforeInsertHooks []CacheHook
var cacheBeforeUpdateHooks []CacheHook
var cacheBeforeDeleteHooks []CacheHook
var cacheBeforeUpsertHooks []CacheHook

var cacheAfterInsertHooks []CacheHook
var cacheAfterSelectHooks []CacheHook
var cacheAfterUpdateHooks []CacheHook
var cacheAfterDeleteHooks []CacheHook
var cacheAfterUpsertHooks []CacheHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Cache) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cacheBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Cache) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cacheBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Cache) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cacheBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Cache) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cacheBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Cache) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cacheAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Cache) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cacheAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Cache) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cacheAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Cache) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cacheAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Cache) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cacheAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCacheHook registers your hook function for all future operations.
func AddCacheHook(hookPoint boil.HookPoint, cacheHook CacheHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		cacheBeforeInsertHooks = append(cacheBeforeInsertHooks, cacheHook)
	case boil.BeforeUpdateHook:
		cacheBeforeUpdateHooks = append(cacheBeforeUpdateHooks, cacheHook)
	case boil.BeforeDeleteHook:
		cacheBeforeDeleteHooks = append(cacheBeforeDeleteHooks, cacheHook)
	case boil.BeforeUpsertHook:
		cacheBeforeUpsertHooks = append(cacheBeforeUpsertHooks, cacheHook)
	case boil.AfterInsertHook:
		cacheAfterInsertHooks = append(cacheAfterInsertHooks, cacheHook)
	case boil.AfterSelectHook:
		cacheAfterSelectHooks = append(cacheAfterSelectHooks, cacheHook)
	case boil.AfterUpdateHook:
		cacheAfterUpdateHooks = append(cacheAfterUpdateHooks, cacheHook)
	case boil.AfterDeleteHook:
		cacheAfterDeleteHooks = append(cacheAfterDeleteHooks, cacheHook)
	case boil.AfterUpsertHook:
		cacheAfterUpsertHooks = append(cacheAfterUpsertHooks, cacheHook)
	}
}

// One returns a single cache record from the query.
func (q cacheQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Cache, error) {
	o := &Cache{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for cache")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Cache records from the query.
func (q cacheQuery) All(ctx context.Context, exec boil.ContextExecutor) (CacheSlice, error) {
	var o []*Cache

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Cache slice")
	}

	if len(cacheAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Cache records in the query.
func (q cacheQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count cache rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q cacheQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if cache exists")
	}

	return count > 0, nil
}

// EscrowCaches retrieves all the escrow_cach's EscrowCaches with an executor.
func (o *Cache) EscrowCaches(mods ...qm.QueryMod) escrowCacheQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"escrow_caches\".\"cache_id\"=?", o.ID),
	)

	query := EscrowCaches(queryMods...)
	queries.SetFrom(query.Query, "\"escrow_caches\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"escrow_caches\".*"})
	}

	return query
}

// LoadEscrowCaches allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (cacheL) LoadEscrowCaches(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCache interface{}, mods queries.Applicator) error {
	var slice []*Cache
	var object *Cache

	if singular {
		object = maybeCache.(*Cache)
	} else {
		slice = *maybeCache.(*[]*Cache)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &cacheR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &cacheR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`escrow_caches`), qm.WhereIn(`cache_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load escrow_caches")
	}

	var resultSlice []*EscrowCache
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice escrow_caches")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on escrow_caches")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for escrow_caches")
	}

	if len(escrowCacheAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.EscrowCaches = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &escrowCacheR{}
			}
			foreign.R.Cache = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.CacheID {
				local.R.EscrowCaches = append(local.R.EscrowCaches, foreign)
				if foreign.R == nil {
					foreign.R = &escrowCacheR{}
				}
				foreign.R.Cache = local
				break
			}
		}
	}

	return nil
}

// AddEscrowCaches adds the given related objects to the existing relationships
// of the cache, optionally inserting them as new records.
// Appends related to o.R.EscrowCaches.
// Sets related.R.Cache appropriately.
func (o *Cache) AddEscrowCaches(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*EscrowCache) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.CacheID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"escrow_caches\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"cache_id"}),
				strmangle.WhereClause("\"", "\"", 2, escrowCachePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.CacheID = o.ID
		}
	}

	if o.R == nil {
		o.R = &cacheR{
			EscrowCaches: related,
		}
	} else {
		o.R.EscrowCaches = append(o.R.EscrowCaches, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &escrowCacheR{
				Cache: o,
			}
		} else {
			rel.R.Cache = o
		}
	}
	return nil
}

// Caches retrieves all the records using an executor.
func Caches(mods ...qm.QueryMod) cacheQuery {
	mods = append(mods, qm.From("\"cache\""))
	return cacheQuery{NewQuery(mods...)}
}

// FindCache retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCache(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Cache, error) {
	cacheObj := &Cache{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"cache\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, cacheObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from cache")
	}

	return cacheObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Cache) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no cache provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(cacheColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	cacheInsertCacheMut.RLock()
	cache, cached := cacheInsertCache[key]
	cacheInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			cacheAllColumns,
			cacheColumnsWithDefault,
			cacheColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(cacheType, cacheMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(cacheType, cacheMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"cache\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"cache\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into cache")
	}

	if !cached {
		cacheInsertCacheMut.Lock()
		cacheInsertCache[key] = cache
		cacheInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Cache.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Cache) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	cacheUpdateCacheMut.RLock()
	cache, cached := cacheUpdateCache[key]
	cacheUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			cacheAllColumns,
			cachePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update cache, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"cache\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, cachePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(cacheType, cacheMapping, append(wl, cachePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update cache row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for cache")
	}

	if !cached {
		cacheUpdateCacheMut.Lock()
		cacheUpdateCache[key] = cache
		cacheUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q cacheQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for cache")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for cache")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CacheSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cachePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"cache\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, cachePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in cache slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all cache")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Cache) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no cache provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(cacheColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	cacheUpsertCacheMut.RLock()
	cache, cached := cacheUpsertCache[key]
	cacheUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			cacheAllColumns,
			cacheColumnsWithDefault,
			cacheColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			cacheAllColumns,
			cachePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert cache, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(cachePrimaryKeyColumns))
			copy(conflict, cachePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"cache\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(cacheType, cacheMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(cacheType, cacheMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert cache")
	}

	if !cached {
		cacheUpsertCacheMut.Lock()
		cacheUpsertCache[key] = cache
		cacheUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Cache record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Cache) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Cache provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cachePrimaryKeyMapping)
	sql := "DELETE FROM \"cache\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from cache")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for cache")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q cacheQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no cacheQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from cache")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for cache")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CacheSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(cacheBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cachePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"cache\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, cachePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from cache slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for cache")
	}

	if len(cacheAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Cache) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCache(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CacheSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CacheSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cachePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"cache\".* FROM \"cache\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, cachePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CacheSlice")
	}

	*o = slice

	return nil
}

// CacheExists checks if the Cache row exists.
func CacheExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"cache\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if cache exists")
	}

	return exists, nil
}
