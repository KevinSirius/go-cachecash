// +build sqlboiler_test

// Code generated by SQLBoiler 3.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testRawBlocks(t *testing.T) {
	t.Parallel()

	query := RawBlocks()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testRawBlocksDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RawBlock{}
	if err = randomize.Struct(seed, o, rawBlockDBTypes, true, rawBlockColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RawBlock struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := RawBlocks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRawBlocksQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RawBlock{}
	if err = randomize.Struct(seed, o, rawBlockDBTypes, true, rawBlockColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RawBlock struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := RawBlocks().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := RawBlocks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRawBlocksSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RawBlock{}
	if err = randomize.Struct(seed, o, rawBlockDBTypes, true, rawBlockColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RawBlock struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := RawBlockSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := RawBlocks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRawBlocksExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RawBlock{}
	if err = randomize.Struct(seed, o, rawBlockDBTypes, true, rawBlockColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RawBlock struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := RawBlockExists(ctx, tx, o.Blockid)
	if err != nil {
		t.Errorf("Unable to check if RawBlock exists: %s", err)
	}
	if !e {
		t.Errorf("Expected RawBlockExists to return true, but got false.")
	}
}

func testRawBlocksFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RawBlock{}
	if err = randomize.Struct(seed, o, rawBlockDBTypes, true, rawBlockColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RawBlock struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	rawBlockFound, err := FindRawBlock(ctx, tx, o.Blockid)
	if err != nil {
		t.Error(err)
	}

	if rawBlockFound == nil {
		t.Error("want a record, got nil")
	}
}

func testRawBlocksBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RawBlock{}
	if err = randomize.Struct(seed, o, rawBlockDBTypes, true, rawBlockColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RawBlock struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = RawBlocks().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testRawBlocksOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RawBlock{}
	if err = randomize.Struct(seed, o, rawBlockDBTypes, true, rawBlockColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RawBlock struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := RawBlocks().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testRawBlocksAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	rawBlockOne := &RawBlock{}
	rawBlockTwo := &RawBlock{}
	if err = randomize.Struct(seed, rawBlockOne, rawBlockDBTypes, false, rawBlockColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RawBlock struct: %s", err)
	}
	if err = randomize.Struct(seed, rawBlockTwo, rawBlockDBTypes, false, rawBlockColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RawBlock struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = rawBlockOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = rawBlockTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := RawBlocks().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testRawBlocksCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	rawBlockOne := &RawBlock{}
	rawBlockTwo := &RawBlock{}
	if err = randomize.Struct(seed, rawBlockOne, rawBlockDBTypes, false, rawBlockColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RawBlock struct: %s", err)
	}
	if err = randomize.Struct(seed, rawBlockTwo, rawBlockDBTypes, false, rawBlockColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RawBlock struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = rawBlockOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = rawBlockTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RawBlocks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func rawBlockBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *RawBlock) error {
	*o = RawBlock{}
	return nil
}

func rawBlockAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *RawBlock) error {
	*o = RawBlock{}
	return nil
}

func rawBlockAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *RawBlock) error {
	*o = RawBlock{}
	return nil
}

func rawBlockBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *RawBlock) error {
	*o = RawBlock{}
	return nil
}

func rawBlockAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *RawBlock) error {
	*o = RawBlock{}
	return nil
}

func rawBlockBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *RawBlock) error {
	*o = RawBlock{}
	return nil
}

func rawBlockAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *RawBlock) error {
	*o = RawBlock{}
	return nil
}

func rawBlockBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *RawBlock) error {
	*o = RawBlock{}
	return nil
}

func rawBlockAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *RawBlock) error {
	*o = RawBlock{}
	return nil
}

func testRawBlocksHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &RawBlock{}
	o := &RawBlock{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, rawBlockDBTypes, false); err != nil {
		t.Errorf("Unable to randomize RawBlock object: %s", err)
	}

	AddRawBlockHook(boil.BeforeInsertHook, rawBlockBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	rawBlockBeforeInsertHooks = []RawBlockHook{}

	AddRawBlockHook(boil.AfterInsertHook, rawBlockAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	rawBlockAfterInsertHooks = []RawBlockHook{}

	AddRawBlockHook(boil.AfterSelectHook, rawBlockAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	rawBlockAfterSelectHooks = []RawBlockHook{}

	AddRawBlockHook(boil.BeforeUpdateHook, rawBlockBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	rawBlockBeforeUpdateHooks = []RawBlockHook{}

	AddRawBlockHook(boil.AfterUpdateHook, rawBlockAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	rawBlockAfterUpdateHooks = []RawBlockHook{}

	AddRawBlockHook(boil.BeforeDeleteHook, rawBlockBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	rawBlockBeforeDeleteHooks = []RawBlockHook{}

	AddRawBlockHook(boil.AfterDeleteHook, rawBlockAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	rawBlockAfterDeleteHooks = []RawBlockHook{}

	AddRawBlockHook(boil.BeforeUpsertHook, rawBlockBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	rawBlockBeforeUpsertHooks = []RawBlockHook{}

	AddRawBlockHook(boil.AfterUpsertHook, rawBlockAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	rawBlockAfterUpsertHooks = []RawBlockHook{}
}

func testRawBlocksInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RawBlock{}
	if err = randomize.Struct(seed, o, rawBlockDBTypes, true, rawBlockColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RawBlock struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RawBlocks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testRawBlocksInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RawBlock{}
	if err = randomize.Struct(seed, o, rawBlockDBTypes, true); err != nil {
		t.Errorf("Unable to randomize RawBlock struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(rawBlockColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := RawBlocks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testRawBlocksReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RawBlock{}
	if err = randomize.Struct(seed, o, rawBlockDBTypes, true, rawBlockColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RawBlock struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testRawBlocksReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RawBlock{}
	if err = randomize.Struct(seed, o, rawBlockDBTypes, true, rawBlockColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RawBlock struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := RawBlockSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testRawBlocksSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RawBlock{}
	if err = randomize.Struct(seed, o, rawBlockDBTypes, true, rawBlockColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RawBlock struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := RawBlocks().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	rawBlockDBTypes = map[string]string{`Blockid`: `bytea`, `Height`: `bigint`, `Bytes`: `bytea`}
	_               = bytes.MinRead
)

func testRawBlocksUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(rawBlockPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(rawBlockAllColumns) == len(rawBlockPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &RawBlock{}
	if err = randomize.Struct(seed, o, rawBlockDBTypes, true, rawBlockColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RawBlock struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RawBlocks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, rawBlockDBTypes, true, rawBlockPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize RawBlock struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testRawBlocksSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(rawBlockAllColumns) == len(rawBlockPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &RawBlock{}
	if err = randomize.Struct(seed, o, rawBlockDBTypes, true, rawBlockColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RawBlock struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RawBlocks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, rawBlockDBTypes, true, rawBlockPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize RawBlock struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(rawBlockAllColumns, rawBlockPrimaryKeyColumns) {
		fields = rawBlockAllColumns
	} else {
		fields = strmangle.SetComplement(
			rawBlockAllColumns,
			rawBlockPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := RawBlockSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testRawBlocksUpsert(t *testing.T) {
	t.Parallel()

	if len(rawBlockAllColumns) == len(rawBlockPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := RawBlock{}
	if err = randomize.Struct(seed, &o, rawBlockDBTypes, true); err != nil {
		t.Errorf("Unable to randomize RawBlock struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert RawBlock: %s", err)
	}

	count, err := RawBlocks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, rawBlockDBTypes, false, rawBlockPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize RawBlock struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert RawBlock: %s", err)
	}

	count, err = RawBlocks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
