package kv

import (
	"context"
	"testing"

	"github.com/pkg/errors"
	"github.com/stretchr/testify/assert"
)

func basicTest(ctx context.Context, t *testing.T, c *Client) {
	_, err := c.CASUint64(ctx, "notexist", []byte{}, 1, 2)
	assert.Equal(t, err, ErrUnsetValue)

	_, _, err = c.GetUint64(ctx, "uint")
	assert.Equal(t, err, ErrUnsetValue)

	nonce, err := c.SetUint64(ctx, "uint", 1)
	assert.Nil(t, err)
	uintOut, _, err := c.GetUint64(ctx, "uint")
	assert.Nil(t, err)
	assert.Equal(t, uint64(1), uintOut)
	_, err = c.CASUint64(ctx, "uint", nonce, 0, 2)
	assert.Equal(t, err, ErrNotEqual)
	_, err = c.CASUint64(ctx, "uint", []byte{1, 2, 3, 4}, 1, 2)
	assert.Equal(t, err, ErrNotEqual)
	newnonce, err := c.CASUint64(ctx, "uint", nonce, 1, 2)
	assert.Nil(t, err)
	assert.NotEqual(t, newnonce, nonce)
	uintOut, _, err = c.GetUint64(ctx, "uint")
	assert.Nil(t, err)
	assert.Equal(t, uint64(2), uintOut)

	_, _, err = c.GetInt64(ctx, "int")
	assert.Equal(t, err, ErrUnsetValue)
	nonce, err = c.SetInt64(ctx, "int", -1)
	assert.Nil(t, err)
	intOut, _, err := c.GetInt64(ctx, "int")
	assert.Nil(t, err)
	assert.Equal(t, int64(-1), intOut)
	_, err = c.CreateInt64(ctx, "int", 0)
	assert.Equal(t, errors.Cause(err), ErrAlreadySet)
	_, err = c.CreateInt64(ctx, "int2", 0)
	assert.Nil(t, err)
	_, err = c.CASInt64(ctx, "int", nonce, 0, -2)
	assert.Equal(t, err, ErrNotEqual)
	_, err = c.CASInt64(ctx, "int", []byte{1, 2, 3, 4}, -1, -2)
	assert.Equal(t, err, ErrNotEqual)
	_, err = c.CASInt64(ctx, "int", nonce, -1, -2)
	assert.Nil(t, err)
	intOut, _, err = c.GetInt64(ctx, "int")
	assert.Nil(t, err)
	assert.Equal(t, int64(-2), intOut)

	_, _, err = c.GetFloat64(ctx, "float")
	assert.Equal(t, err, ErrUnsetValue)
	nonce, err = c.SetFloat64(ctx, "float", -1.2)
	assert.Nil(t, err)
	floatOut, _, err := c.GetFloat64(ctx, "float")
	assert.Nil(t, err)
	assert.Equal(t, float64(-1.2), floatOut)
	_, err = c.CreateFloat64(ctx, "float", 0)
	assert.Equal(t, errors.Cause(err), ErrAlreadySet)
	_, err = c.CreateFloat64(ctx, "float2", 0)
	assert.Nil(t, err)
	_, err = c.CASFloat64(ctx, "float", nonce, -1.1, -2.4)
	assert.Equal(t, err, ErrNotEqual)
	_, err = c.CASFloat64(ctx, "float", []byte{1, 2, 3, 4}, -1.2, -2.4)
	assert.Equal(t, err, ErrNotEqual)
	_, err = c.CASFloat64(ctx, "float", nonce, -1.2, -2.4)
	assert.Nil(t, err)
	floatOut, _, err = c.GetFloat64(ctx, "float")
	assert.Nil(t, err)
	assert.Equal(t, float64(-2.4), floatOut)

	_, _, err = c.GetString(ctx, "str")
	assert.Equal(t, err, ErrUnsetValue)
	nonce, err = c.SetString(ctx, "str", "hello")
	assert.Nil(t, err)
	strOut, _, err := c.GetString(ctx, "str")
	assert.Nil(t, err)
	assert.Equal(t, "hello", strOut)
	_, err = c.CreateString(ctx, "str", "asdf")
	assert.Equal(t, errors.Cause(err), ErrAlreadySet)
	_, err = c.CreateString(ctx, "str2", "asdf")
	assert.Nil(t, err)
	_, err = c.CASString(ctx, "str", nonce, "nope", "world")
	assert.Equal(t, err, ErrNotEqual)
	_, err = c.CASString(ctx, "str", []byte{1, 2, 3, 4}, "hello", "world")
	assert.Equal(t, err, ErrNotEqual)
	_, err = c.CASString(ctx, "str", nonce, "hello", "world")
	assert.Nil(t, err)
	strOut, _, err = c.GetString(ctx, "str")
	assert.Nil(t, err)
	assert.Equal(t, "world", strOut)

	_, _, err = c.GetBytes(ctx, "bytes")
	assert.Equal(t, err, ErrUnsetValue)
	nonce, err = c.SetBytes(ctx, "bytes", []byte{0, 1, 0, 1})
	assert.Nil(t, err)
	_, err = c.CreateBytes(ctx, "bytes", []byte{0, 1, 1, 1})
	assert.Equal(t, errors.Cause(err), ErrAlreadySet)
	_, err = c.CreateBytes(ctx, "bytes2", []byte{0, 1, 1, 1})
	assert.Nil(t, err)
	_, err = c.CASBytes(ctx, "bytes", nonce, []byte{1, 0, 1, 0}, []byte{1, 0, 1, 0})
	assert.Equal(t, err, ErrNotEqual)
	_, err = c.CASBytes(ctx, "bytes", nonce, []byte{0, 1, 0, 1}, []byte{1, 0, 1, 0})
	assert.Nil(t, err)
}
