// +build sqlboiler_test

// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testKvstores(t *testing.T) {
	t.Parallel()

	query := Kvstores()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testKvstoresDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Kvstore{}
	if err = randomize.Struct(seed, o, kvstoreDBTypes, true, kvstoreColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Kvstore struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Kvstores().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testKvstoresQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Kvstore{}
	if err = randomize.Struct(seed, o, kvstoreDBTypes, true, kvstoreColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Kvstore struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Kvstores().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Kvstores().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testKvstoresSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Kvstore{}
	if err = randomize.Struct(seed, o, kvstoreDBTypes, true, kvstoreColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Kvstore struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := KvstoreSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Kvstores().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testKvstoresExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Kvstore{}
	if err = randomize.Struct(seed, o, kvstoreDBTypes, true, kvstoreColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Kvstore struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := KvstoreExists(ctx, tx, o.Member, o.Key)
	if err != nil {
		t.Errorf("Unable to check if Kvstore exists: %s", err)
	}
	if !e {
		t.Errorf("Expected KvstoreExists to return true, but got false.")
	}
}

func testKvstoresFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Kvstore{}
	if err = randomize.Struct(seed, o, kvstoreDBTypes, true, kvstoreColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Kvstore struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	kvstoreFound, err := FindKvstore(ctx, tx, o.Member, o.Key)
	if err != nil {
		t.Error(err)
	}

	if kvstoreFound == nil {
		t.Error("want a record, got nil")
	}
}

func testKvstoresBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Kvstore{}
	if err = randomize.Struct(seed, o, kvstoreDBTypes, true, kvstoreColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Kvstore struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Kvstores().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testKvstoresOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Kvstore{}
	if err = randomize.Struct(seed, o, kvstoreDBTypes, true, kvstoreColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Kvstore struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Kvstores().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testKvstoresAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	kvstoreOne := &Kvstore{}
	kvstoreTwo := &Kvstore{}
	if err = randomize.Struct(seed, kvstoreOne, kvstoreDBTypes, false, kvstoreColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Kvstore struct: %s", err)
	}
	if err = randomize.Struct(seed, kvstoreTwo, kvstoreDBTypes, false, kvstoreColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Kvstore struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = kvstoreOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = kvstoreTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Kvstores().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testKvstoresCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	kvstoreOne := &Kvstore{}
	kvstoreTwo := &Kvstore{}
	if err = randomize.Struct(seed, kvstoreOne, kvstoreDBTypes, false, kvstoreColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Kvstore struct: %s", err)
	}
	if err = randomize.Struct(seed, kvstoreTwo, kvstoreDBTypes, false, kvstoreColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Kvstore struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = kvstoreOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = kvstoreTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Kvstores().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func kvstoreBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Kvstore) error {
	*o = Kvstore{}
	return nil
}

func kvstoreAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Kvstore) error {
	*o = Kvstore{}
	return nil
}

func kvstoreAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Kvstore) error {
	*o = Kvstore{}
	return nil
}

func kvstoreBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Kvstore) error {
	*o = Kvstore{}
	return nil
}

func kvstoreAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Kvstore) error {
	*o = Kvstore{}
	return nil
}

func kvstoreBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Kvstore) error {
	*o = Kvstore{}
	return nil
}

func kvstoreAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Kvstore) error {
	*o = Kvstore{}
	return nil
}

func kvstoreBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Kvstore) error {
	*o = Kvstore{}
	return nil
}

func kvstoreAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Kvstore) error {
	*o = Kvstore{}
	return nil
}

func testKvstoresHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Kvstore{}
	o := &Kvstore{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, kvstoreDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Kvstore object: %s", err)
	}

	AddKvstoreHook(boil.BeforeInsertHook, kvstoreBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	kvstoreBeforeInsertHooks = []KvstoreHook{}

	AddKvstoreHook(boil.AfterInsertHook, kvstoreAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	kvstoreAfterInsertHooks = []KvstoreHook{}

	AddKvstoreHook(boil.AfterSelectHook, kvstoreAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	kvstoreAfterSelectHooks = []KvstoreHook{}

	AddKvstoreHook(boil.BeforeUpdateHook, kvstoreBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	kvstoreBeforeUpdateHooks = []KvstoreHook{}

	AddKvstoreHook(boil.AfterUpdateHook, kvstoreAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	kvstoreAfterUpdateHooks = []KvstoreHook{}

	AddKvstoreHook(boil.BeforeDeleteHook, kvstoreBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	kvstoreBeforeDeleteHooks = []KvstoreHook{}

	AddKvstoreHook(boil.AfterDeleteHook, kvstoreAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	kvstoreAfterDeleteHooks = []KvstoreHook{}

	AddKvstoreHook(boil.BeforeUpsertHook, kvstoreBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	kvstoreBeforeUpsertHooks = []KvstoreHook{}

	AddKvstoreHook(boil.AfterUpsertHook, kvstoreAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	kvstoreAfterUpsertHooks = []KvstoreHook{}
}

func testKvstoresInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Kvstore{}
	if err = randomize.Struct(seed, o, kvstoreDBTypes, true, kvstoreColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Kvstore struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Kvstores().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testKvstoresInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Kvstore{}
	if err = randomize.Struct(seed, o, kvstoreDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Kvstore struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(kvstoreColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Kvstores().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testKvstoresReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Kvstore{}
	if err = randomize.Struct(seed, o, kvstoreDBTypes, true, kvstoreColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Kvstore struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testKvstoresReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Kvstore{}
	if err = randomize.Struct(seed, o, kvstoreDBTypes, true, kvstoreColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Kvstore struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := KvstoreSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testKvstoresSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Kvstore{}
	if err = randomize.Struct(seed, o, kvstoreDBTypes, true, kvstoreColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Kvstore struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Kvstores().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	kvstoreDBTypes = map[string]string{`Member`: `character varying`, `Key`: `character varying`, `Value`: `bytea`, `Nonce`: `bytea`}
	_              = bytes.MinRead
)

func testKvstoresUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(kvstorePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(kvstoreAllColumns) == len(kvstorePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Kvstore{}
	if err = randomize.Struct(seed, o, kvstoreDBTypes, true, kvstoreColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Kvstore struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Kvstores().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, kvstoreDBTypes, true, kvstorePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Kvstore struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testKvstoresSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(kvstoreAllColumns) == len(kvstorePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Kvstore{}
	if err = randomize.Struct(seed, o, kvstoreDBTypes, true, kvstoreColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Kvstore struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Kvstores().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, kvstoreDBTypes, true, kvstorePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Kvstore struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(kvstoreAllColumns, kvstorePrimaryKeyColumns) {
		fields = kvstoreAllColumns
	} else {
		fields = strmangle.SetComplement(
			kvstoreAllColumns,
			kvstorePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := KvstoreSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testKvstoresUpsert(t *testing.T) {
	t.Parallel()

	if len(kvstoreAllColumns) == len(kvstorePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Kvstore{}
	if err = randomize.Struct(seed, &o, kvstoreDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Kvstore struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Kvstore: %s", err)
	}

	count, err := Kvstores().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, kvstoreDBTypes, false, kvstorePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Kvstore struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Kvstore: %s", err)
	}

	count, err = Kvstores().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
