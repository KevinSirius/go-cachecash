// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cache_publisher.proto

package ccmsg

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// XXX: See similarities to ContentRequest.
type CacheMissRequest struct {
	// In chunks.
	// XXX: This was formerly in bytes.  Was there a good reason for that?
	RangeBegin           uint64   `protobuf:"varint,2,opt,name=range_begin,json=rangeBegin,proto3" json:"range_begin,omitempty"`
	RangeEnd             uint64   `protobuf:"varint,3,opt,name=range_end,json=rangeEnd,proto3" json:"range_end,omitempty"`
	ObjectId             []byte   `protobuf:"bytes,4,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CacheMissRequest) Reset()         { *m = CacheMissRequest{} }
func (m *CacheMissRequest) String() string { return proto.CompactTextString(m) }
func (*CacheMissRequest) ProtoMessage()    {}
func (*CacheMissRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4e9b15ca46b35c12, []int{0}
}
func (m *CacheMissRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CacheMissRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CacheMissRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CacheMissRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CacheMissRequest.Merge(m, src)
}
func (m *CacheMissRequest) XXX_Size() int {
	return m.Size()
}
func (m *CacheMissRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CacheMissRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CacheMissRequest proto.InternalMessageInfo

func (m *CacheMissRequest) GetRangeBegin() uint64 {
	if m != nil {
		return m.RangeBegin
	}
	return 0
}

func (m *CacheMissRequest) GetRangeEnd() uint64 {
	if m != nil {
		return m.RangeEnd
	}
	return 0
}

func (m *CacheMissRequest) GetObjectId() []byte {
	if m != nil {
		return m.ObjectId
	}
	return nil
}

type CacheMissResponse struct {
	Metadata             *ObjectMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Chunks               []*Chunk        `protobuf:"bytes,2,rep,name=chunks,proto3" json:"chunks,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *CacheMissResponse) Reset()         { *m = CacheMissResponse{} }
func (m *CacheMissResponse) String() string { return proto.CompactTextString(m) }
func (*CacheMissResponse) ProtoMessage()    {}
func (*CacheMissResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4e9b15ca46b35c12, []int{1}
}
func (m *CacheMissResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CacheMissResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CacheMissResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CacheMissResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CacheMissResponse.Merge(m, src)
}
func (m *CacheMissResponse) XXX_Size() int {
	return m.Size()
}
func (m *CacheMissResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CacheMissResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CacheMissResponse proto.InternalMessageInfo

func (m *CacheMissResponse) GetMetadata() *ObjectMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *CacheMissResponse) GetChunks() []*Chunk {
	if m != nil {
		return m.Chunks
	}
	return nil
}

type Chunk struct {
	SlotIdx uint64 `protobuf:"varint,1,opt,name=slot_idx,json=slotIdx,proto3" json:"slot_idx,omitempty"`
	// Types that are valid to be assigned to Source:
	//	*Chunk_Http
	//	*Chunk_Inline
	Source               isChunk_Source `protobuf_oneof:"source"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *Chunk) Reset()         { *m = Chunk{} }
func (m *Chunk) String() string { return proto.CompactTextString(m) }
func (*Chunk) ProtoMessage()    {}
func (*Chunk) Descriptor() ([]byte, []int) {
	return fileDescriptor_4e9b15ca46b35c12, []int{2}
}
func (m *Chunk) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Chunk) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Chunk.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Chunk) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Chunk.Merge(m, src)
}
func (m *Chunk) XXX_Size() int {
	return m.Size()
}
func (m *Chunk) XXX_DiscardUnknown() {
	xxx_messageInfo_Chunk.DiscardUnknown(m)
}

var xxx_messageInfo_Chunk proto.InternalMessageInfo

type isChunk_Source interface {
	isChunk_Source()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Chunk_Http struct {
	Http *ChunkSourceHTTP `protobuf:"bytes,10,opt,name=http,proto3,oneof"`
}
type Chunk_Inline struct {
	Inline *ChunkSourceInline `protobuf:"bytes,20,opt,name=inline,proto3,oneof"`
}

func (*Chunk_Http) isChunk_Source()   {}
func (*Chunk_Inline) isChunk_Source() {}

func (m *Chunk) GetSource() isChunk_Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (m *Chunk) GetSlotIdx() uint64 {
	if m != nil {
		return m.SlotIdx
	}
	return 0
}

func (m *Chunk) GetHttp() *ChunkSourceHTTP {
	if x, ok := m.GetSource().(*Chunk_Http); ok {
		return x.Http
	}
	return nil
}

func (m *Chunk) GetInline() *ChunkSourceInline {
	if x, ok := m.GetSource().(*Chunk_Inline); ok {
		return x.Inline
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Chunk) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Chunk_OneofMarshaler, _Chunk_OneofUnmarshaler, _Chunk_OneofSizer, []interface{}{
		(*Chunk_Http)(nil),
		(*Chunk_Inline)(nil),
	}
}

func _Chunk_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Chunk)
	// source
	switch x := m.Source.(type) {
	case *Chunk_Http:
		_ = b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Http); err != nil {
			return err
		}
	case *Chunk_Inline:
		_ = b.EncodeVarint(20<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Inline); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Chunk.Source has unexpected type %T", x)
	}
	return nil
}

func _Chunk_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Chunk)
	switch tag {
	case 10: // source.http
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ChunkSourceHTTP)
		err := b.DecodeMessage(msg)
		m.Source = &Chunk_Http{msg}
		return true, err
	case 20: // source.inline
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ChunkSourceInline)
		err := b.DecodeMessage(msg)
		m.Source = &Chunk_Inline{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Chunk_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Chunk)
	// source
	switch x := m.Source.(type) {
	case *Chunk_Http:
		s := proto.Size(x.Http)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Chunk_Inline:
		s := proto.Size(x.Inline)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type ChunkSourceHTTP struct {
	Url                  string   `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	RangeBegin           uint64   `protobuf:"varint,2,opt,name=range_begin,json=rangeBegin,proto3" json:"range_begin,omitempty"`
	RangeEnd             uint64   `protobuf:"varint,3,opt,name=range_end,json=rangeEnd,proto3" json:"range_end,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChunkSourceHTTP) Reset()         { *m = ChunkSourceHTTP{} }
func (m *ChunkSourceHTTP) String() string { return proto.CompactTextString(m) }
func (*ChunkSourceHTTP) ProtoMessage()    {}
func (*ChunkSourceHTTP) Descriptor() ([]byte, []int) {
	return fileDescriptor_4e9b15ca46b35c12, []int{3}
}
func (m *ChunkSourceHTTP) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChunkSourceHTTP) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChunkSourceHTTP.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChunkSourceHTTP) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChunkSourceHTTP.Merge(m, src)
}
func (m *ChunkSourceHTTP) XXX_Size() int {
	return m.Size()
}
func (m *ChunkSourceHTTP) XXX_DiscardUnknown() {
	xxx_messageInfo_ChunkSourceHTTP.DiscardUnknown(m)
}

var xxx_messageInfo_ChunkSourceHTTP proto.InternalMessageInfo

func (m *ChunkSourceHTTP) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *ChunkSourceHTTP) GetRangeBegin() uint64 {
	if m != nil {
		return m.RangeBegin
	}
	return 0
}

func (m *ChunkSourceHTTP) GetRangeEnd() uint64 {
	if m != nil {
		return m.RangeEnd
	}
	return 0
}

type ChunkSourceInline struct {
	Chunk                [][]byte `protobuf:"bytes,1,rep,name=chunk,proto3" json:"chunk,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChunkSourceInline) Reset()         { *m = ChunkSourceInline{} }
func (m *ChunkSourceInline) String() string { return proto.CompactTextString(m) }
func (*ChunkSourceInline) ProtoMessage()    {}
func (*ChunkSourceInline) Descriptor() ([]byte, []int) {
	return fileDescriptor_4e9b15ca46b35c12, []int{4}
}
func (m *ChunkSourceInline) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChunkSourceInline) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChunkSourceInline.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChunkSourceInline) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChunkSourceInline.Merge(m, src)
}
func (m *ChunkSourceInline) XXX_Size() int {
	return m.Size()
}
func (m *ChunkSourceInline) XXX_DiscardUnknown() {
	xxx_messageInfo_ChunkSourceInline.DiscardUnknown(m)
}

var xxx_messageInfo_ChunkSourceInline proto.InternalMessageInfo

func (m *ChunkSourceInline) GetChunk() [][]byte {
	if m != nil {
		return m.Chunk
	}
	return nil
}

func init() {
	proto.RegisterType((*CacheMissRequest)(nil), "ccmsg.CacheMissRequest")
	proto.RegisterType((*CacheMissResponse)(nil), "ccmsg.CacheMissResponse")
	proto.RegisterType((*Chunk)(nil), "ccmsg.Chunk")
	proto.RegisterType((*ChunkSourceHTTP)(nil), "ccmsg.ChunkSourceHTTP")
	proto.RegisterType((*ChunkSourceInline)(nil), "ccmsg.ChunkSourceInline")
}

func init() { proto.RegisterFile("cache_publisher.proto", fileDescriptor_4e9b15ca46b35c12) }

var fileDescriptor_4e9b15ca46b35c12 = []byte{
	// 416 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x52, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xce, 0x36, 0x3f, 0x38, 0x93, 0x08, 0xd2, 0x55, 0x0b, 0x4b, 0x90, 0x82, 0x65, 0x71, 0x30,
	0x12, 0xb8, 0xc2, 0xbc, 0x00, 0x4a, 0x85, 0x94, 0x1c, 0x2a, 0xaa, 0xa5, 0xf7, 0xc8, 0x5e, 0x2f,
	0xb6, 0xc1, 0xde, 0x35, 0xde, 0xb5, 0xd4, 0xa7, 0xe0, 0xcc, 0x23, 0x71, 0xe4, 0x11, 0x50, 0x78,
	0x11, 0xe4, 0xb1, 0x5b, 0x55, 0xc9, 0x91, 0xdb, 0x7e, 0x3f, 0xf3, 0xb3, 0x33, 0x03, 0xe7, 0x22,
	0x12, 0x99, 0xdc, 0x55, 0x4d, 0x5c, 0xe4, 0x26, 0x93, 0x75, 0x50, 0xd5, 0xda, 0x6a, 0x3a, 0x16,
	0xa2, 0x34, 0xe9, 0xf2, 0x6d, 0x9a, 0xdb, 0xac, 0x89, 0x03, 0xa1, 0xcb, 0x8b, 0x54, 0xa7, 0xfa,
	0x02, 0xd5, 0xb8, 0xf9, 0x82, 0x08, 0x01, 0xbe, 0xba, 0xa8, 0xe5, 0x5c, 0xe8, 0xb2, 0xd4, 0xaa,
	0x43, 0x5e, 0x09, 0x8b, 0xcb, 0x36, 0xf9, 0x55, 0x6e, 0x0c, 0x97, 0xdf, 0x1b, 0x69, 0x2c, 0x7d,
	0x09, 0xb3, 0x3a, 0x52, 0xa9, 0xdc, 0xc5, 0x32, 0xcd, 0x15, 0x3b, 0x71, 0x89, 0x3f, 0xe2, 0x80,
	0xd4, 0xba, 0x65, 0xe8, 0x0b, 0x98, 0x76, 0x06, 0xa9, 0x12, 0x36, 0x44, 0xd9, 0x41, 0xe2, 0xa3,
	0x4a, 0x5a, 0x51, 0xc7, 0x5f, 0xa5, 0xb0, 0xbb, 0x3c, 0x61, 0x23, 0x97, 0xf8, 0x73, 0xee, 0x74,
	0xc4, 0x36, 0xf1, 0x0a, 0x38, 0x7d, 0x50, 0xce, 0x54, 0x5a, 0x19, 0x49, 0xdf, 0x81, 0x53, 0x4a,
	0x1b, 0x25, 0x91, 0x8d, 0x18, 0x71, 0x89, 0x3f, 0x0b, 0xcf, 0x03, 0xfc, 0x5a, 0xf0, 0x09, 0xe3,
	0xae, 0x7a, 0x91, 0xdf, 0xdb, 0xe8, 0x2b, 0x98, 0x88, 0xac, 0x51, 0xdf, 0x0c, 0x3b, 0x71, 0x87,
	0xfe, 0x2c, 0x9c, 0xf7, 0x01, 0x97, 0x2d, 0xc9, 0x7b, 0xcd, 0xfb, 0x41, 0x60, 0x8c, 0x0c, 0x7d,
	0x0e, 0x8e, 0x29, 0x74, 0xdb, 0xd2, 0x2d, 0x96, 0x18, 0xf1, 0x47, 0x2d, 0xde, 0x26, 0xb7, 0xf4,
	0x0d, 0x8c, 0x32, 0x6b, 0x2b, 0x06, 0x58, 0xf9, 0xe9, 0xc3, 0x44, 0x9f, 0x75, 0x53, 0x0b, 0xb9,
	0xb9, 0xb9, 0xb9, 0xde, 0x0c, 0x38, 0xba, 0x68, 0x08, 0x93, 0x5c, 0x15, 0xb9, 0x92, 0xec, 0x0c,
	0xfd, 0xec, 0xd8, 0xbf, 0x45, 0x7d, 0x33, 0xe0, 0xbd, 0x73, 0xed, 0xc0, 0xc4, 0xa0, 0xe2, 0x45,
	0xf0, 0xe4, 0x20, 0x31, 0x5d, 0xc0, 0xb0, 0xa9, 0x0b, 0x6c, 0x6a, 0xca, 0xdb, 0xe7, 0xff, 0x8d,
	0xdf, 0x7b, 0x0d, 0xa7, 0x47, 0xbd, 0xd0, 0x33, 0x18, 0xe3, 0x48, 0x18, 0x71, 0x87, 0xfe, 0x9c,
	0x77, 0x20, 0xe4, 0xf0, 0x18, 0x97, 0x71, 0x7d, 0x77, 0x57, 0xf4, 0x03, 0x4c, 0xef, 0xd7, 0x43,
	0x9f, 0xdd, 0x7d, 0xed, 0xe0, 0x3e, 0x96, 0xec, 0x58, 0xe8, 0x36, 0xe9, 0x0d, 0xd6, 0x8b, 0x5f,
	0xfb, 0x15, 0xf9, 0xbd, 0x5f, 0x91, 0x3f, 0xfb, 0x15, 0xf9, 0xf9, 0x77, 0x35, 0x88, 0x27, 0x78,
	0x68, 0xef, 0xff, 0x05, 0x00, 0x00, 0xff, 0xff, 0x2c, 0x0d, 0x0c, 0xcc, 0xc5, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CachePublisherClient is the client API for CachePublisher service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CachePublisherClient interface {
	CacheMiss(ctx context.Context, in *CacheMissRequest, opts ...grpc.CallOption) (*CacheMissResponse, error)
}

type cachePublisherClient struct {
	cc *grpc.ClientConn
}

func NewCachePublisherClient(cc *grpc.ClientConn) CachePublisherClient {
	return &cachePublisherClient{cc}
}

func (c *cachePublisherClient) CacheMiss(ctx context.Context, in *CacheMissRequest, opts ...grpc.CallOption) (*CacheMissResponse, error) {
	out := new(CacheMissResponse)
	err := c.cc.Invoke(ctx, "/ccmsg.CachePublisher/CacheMiss", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CachePublisherServer is the server API for CachePublisher service.
type CachePublisherServer interface {
	CacheMiss(context.Context, *CacheMissRequest) (*CacheMissResponse, error)
}

func RegisterCachePublisherServer(s *grpc.Server, srv CachePublisherServer) {
	s.RegisterService(&_CachePublisher_serviceDesc, srv)
}

func _CachePublisher_CacheMiss_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CacheMissRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CachePublisherServer).CacheMiss(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ccmsg.CachePublisher/CacheMiss",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CachePublisherServer).CacheMiss(ctx, req.(*CacheMissRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CachePublisher_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ccmsg.CachePublisher",
	HandlerType: (*CachePublisherServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CacheMiss",
			Handler:    _CachePublisher_CacheMiss_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cache_publisher.proto",
}

func (m *CacheMissRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CacheMissRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RangeBegin != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCachePublisher(dAtA, i, uint64(m.RangeBegin))
	}
	if m.RangeEnd != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCachePublisher(dAtA, i, uint64(m.RangeEnd))
	}
	if len(m.ObjectId) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCachePublisher(dAtA, i, uint64(len(m.ObjectId)))
		i += copy(dAtA[i:], m.ObjectId)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CacheMissResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CacheMissResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Metadata != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCachePublisher(dAtA, i, uint64(m.Metadata.Size()))
		n1, err1 := m.Metadata.MarshalTo(dAtA[i:])
		if err1 != nil {
			return 0, err1
		}
		i += n1
	}
	if len(m.Chunks) > 0 {
		for _, msg := range m.Chunks {
			dAtA[i] = 0x12
			i++
			i = encodeVarintCachePublisher(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Chunk) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Chunk) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SlotIdx != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCachePublisher(dAtA, i, uint64(m.SlotIdx))
	}
	if m.Source != nil {
		nn2, err2 := m.Source.MarshalTo(dAtA[i:])
		if err2 != nil {
			return 0, err2
		}
		i += nn2
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Chunk_Http) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Http != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintCachePublisher(dAtA, i, uint64(m.Http.Size()))
		n3, err3 := m.Http.MarshalTo(dAtA[i:])
		if err3 != nil {
			return 0, err3
		}
		i += n3
	}
	return i, nil
}
func (m *Chunk_Inline) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Inline != nil {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintCachePublisher(dAtA, i, uint64(m.Inline.Size()))
		n4, err4 := m.Inline.MarshalTo(dAtA[i:])
		if err4 != nil {
			return 0, err4
		}
		i += n4
	}
	return i, nil
}
func (m *ChunkSourceHTTP) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChunkSourceHTTP) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Url) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCachePublisher(dAtA, i, uint64(len(m.Url)))
		i += copy(dAtA[i:], m.Url)
	}
	if m.RangeBegin != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCachePublisher(dAtA, i, uint64(m.RangeBegin))
	}
	if m.RangeEnd != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCachePublisher(dAtA, i, uint64(m.RangeEnd))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ChunkSourceInline) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChunkSourceInline) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Chunk) > 0 {
		for _, b := range m.Chunk {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCachePublisher(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintCachePublisher(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *CacheMissRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RangeBegin != 0 {
		n += 1 + sovCachePublisher(uint64(m.RangeBegin))
	}
	if m.RangeEnd != 0 {
		n += 1 + sovCachePublisher(uint64(m.RangeEnd))
	}
	l = len(m.ObjectId)
	if l > 0 {
		n += 1 + l + sovCachePublisher(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CacheMissResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovCachePublisher(uint64(l))
	}
	if len(m.Chunks) > 0 {
		for _, e := range m.Chunks {
			l = e.Size()
			n += 1 + l + sovCachePublisher(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Chunk) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SlotIdx != 0 {
		n += 1 + sovCachePublisher(uint64(m.SlotIdx))
	}
	if m.Source != nil {
		n += m.Source.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Chunk_Http) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Http != nil {
		l = m.Http.Size()
		n += 1 + l + sovCachePublisher(uint64(l))
	}
	return n
}
func (m *Chunk_Inline) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Inline != nil {
		l = m.Inline.Size()
		n += 2 + l + sovCachePublisher(uint64(l))
	}
	return n
}
func (m *ChunkSourceHTTP) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovCachePublisher(uint64(l))
	}
	if m.RangeBegin != 0 {
		n += 1 + sovCachePublisher(uint64(m.RangeBegin))
	}
	if m.RangeEnd != 0 {
		n += 1 + sovCachePublisher(uint64(m.RangeEnd))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ChunkSourceInline) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Chunk) > 0 {
		for _, b := range m.Chunk {
			l = len(b)
			n += 1 + l + sovCachePublisher(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovCachePublisher(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCachePublisher(x uint64) (n int) {
	return sovCachePublisher(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CacheMissRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCachePublisher
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CacheMissRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CacheMissRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RangeBegin", wireType)
			}
			m.RangeBegin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCachePublisher
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RangeBegin |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RangeEnd", wireType)
			}
			m.RangeEnd = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCachePublisher
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RangeEnd |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCachePublisher
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCachePublisher
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCachePublisher
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjectId = append(m.ObjectId[:0], dAtA[iNdEx:postIndex]...)
			if m.ObjectId == nil {
				m.ObjectId = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCachePublisher(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCachePublisher
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCachePublisher
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CacheMissResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCachePublisher
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CacheMissResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CacheMissResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCachePublisher
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCachePublisher
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCachePublisher
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &ObjectMetadata{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chunks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCachePublisher
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCachePublisher
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCachePublisher
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chunks = append(m.Chunks, &Chunk{})
			if err := m.Chunks[len(m.Chunks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCachePublisher(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCachePublisher
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCachePublisher
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Chunk) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCachePublisher
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Chunk: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Chunk: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlotIdx", wireType)
			}
			m.SlotIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCachePublisher
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SlotIdx |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Http", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCachePublisher
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCachePublisher
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCachePublisher
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ChunkSourceHTTP{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Source = &Chunk_Http{v}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inline", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCachePublisher
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCachePublisher
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCachePublisher
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ChunkSourceInline{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Source = &Chunk_Inline{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCachePublisher(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCachePublisher
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCachePublisher
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChunkSourceHTTP) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCachePublisher
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChunkSourceHTTP: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChunkSourceHTTP: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCachePublisher
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCachePublisher
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCachePublisher
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RangeBegin", wireType)
			}
			m.RangeBegin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCachePublisher
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RangeBegin |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RangeEnd", wireType)
			}
			m.RangeEnd = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCachePublisher
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RangeEnd |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCachePublisher(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCachePublisher
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCachePublisher
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChunkSourceInline) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCachePublisher
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChunkSourceInline: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChunkSourceInline: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chunk", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCachePublisher
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCachePublisher
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCachePublisher
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chunk = append(m.Chunk, make([]byte, postIndex-iNdEx))
			copy(m.Chunk[len(m.Chunk)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCachePublisher(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCachePublisher
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCachePublisher
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCachePublisher(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCachePublisher
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCachePublisher
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCachePublisher
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCachePublisher
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthCachePublisher
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCachePublisher
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCachePublisher(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthCachePublisher
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCachePublisher = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCachePublisher   = fmt.Errorf("proto: integer overflow")
)
