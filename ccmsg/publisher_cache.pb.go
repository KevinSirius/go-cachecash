// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: publisher_cache.proto

package ccmsg

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type EscrowOfferRequest struct {
	EscrowId             []byte   `protobuf:"bytes,1,opt,name=escrow_id,json=escrowId,proto3" json:"escrow_id,omitempty"`
	InnerMasterKey       []byte   `protobuf:"bytes,2,opt,name=inner_master_key,json=innerMasterKey,proto3" json:"inner_master_key,omitempty"`
	OuterMasterKey       []byte   `protobuf:"bytes,3,opt,name=outer_master_key,json=outerMasterKey,proto3" json:"outer_master_key,omitempty"`
	Slots                uint64   `protobuf:"varint,4,opt,name=slots,proto3" json:"slots,omitempty"`
	PublisherAddr        string   `protobuf:"bytes,5,opt,name=publisher_addr,json=publisherAddr,proto3" json:"publisher_addr,omitempty"`
	StartBlock           uint64   `protobuf:"varint,6,opt,name=start_block,json=startBlock,proto3" json:"start_block,omitempty"`
	EndBlock             uint64   `protobuf:"varint,7,opt,name=end_block,json=endBlock,proto3" json:"end_block,omitempty"`
	PublicKey            []byte   `protobuf:"bytes,8,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	PrivateKey           []byte   `protobuf:"bytes,9,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EscrowOfferRequest) Reset()         { *m = EscrowOfferRequest{} }
func (m *EscrowOfferRequest) String() string { return proto.CompactTextString(m) }
func (*EscrowOfferRequest) ProtoMessage()    {}
func (*EscrowOfferRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8335fd15ee4dfbe0, []int{0}
}
func (m *EscrowOfferRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EscrowOfferRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EscrowOfferRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EscrowOfferRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EscrowOfferRequest.Merge(m, src)
}
func (m *EscrowOfferRequest) XXX_Size() int {
	return m.Size()
}
func (m *EscrowOfferRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EscrowOfferRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EscrowOfferRequest proto.InternalMessageInfo

func (m *EscrowOfferRequest) GetEscrowId() []byte {
	if m != nil {
		return m.EscrowId
	}
	return nil
}

func (m *EscrowOfferRequest) GetInnerMasterKey() []byte {
	if m != nil {
		return m.InnerMasterKey
	}
	return nil
}

func (m *EscrowOfferRequest) GetOuterMasterKey() []byte {
	if m != nil {
		return m.OuterMasterKey
	}
	return nil
}

func (m *EscrowOfferRequest) GetSlots() uint64 {
	if m != nil {
		return m.Slots
	}
	return 0
}

func (m *EscrowOfferRequest) GetPublisherAddr() string {
	if m != nil {
		return m.PublisherAddr
	}
	return ""
}

func (m *EscrowOfferRequest) GetStartBlock() uint64 {
	if m != nil {
		return m.StartBlock
	}
	return 0
}

func (m *EscrowOfferRequest) GetEndBlock() uint64 {
	if m != nil {
		return m.EndBlock
	}
	return 0
}

func (m *EscrowOfferRequest) GetPublicKey() []byte {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

func (m *EscrowOfferRequest) GetPrivateKey() []byte {
	if m != nil {
		return m.PrivateKey
	}
	return nil
}

// XXX: return a response or error if we reject the escrow?
type EscrowOfferResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EscrowOfferResponse) Reset()         { *m = EscrowOfferResponse{} }
func (m *EscrowOfferResponse) String() string { return proto.CompactTextString(m) }
func (*EscrowOfferResponse) ProtoMessage()    {}
func (*EscrowOfferResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8335fd15ee4dfbe0, []int{1}
}
func (m *EscrowOfferResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EscrowOfferResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EscrowOfferResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EscrowOfferResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EscrowOfferResponse.Merge(m, src)
}
func (m *EscrowOfferResponse) XXX_Size() int {
	return m.Size()
}
func (m *EscrowOfferResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_EscrowOfferResponse.DiscardUnknown(m)
}

var xxx_messageInfo_EscrowOfferResponse proto.InternalMessageInfo

type PingCacheRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PingCacheRequest) Reset()         { *m = PingCacheRequest{} }
func (m *PingCacheRequest) String() string { return proto.CompactTextString(m) }
func (*PingCacheRequest) ProtoMessage()    {}
func (*PingCacheRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8335fd15ee4dfbe0, []int{2}
}
func (m *PingCacheRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PingCacheRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PingCacheRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PingCacheRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PingCacheRequest.Merge(m, src)
}
func (m *PingCacheRequest) XXX_Size() int {
	return m.Size()
}
func (m *PingCacheRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PingCacheRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PingCacheRequest proto.InternalMessageInfo

type PingCacheResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PingCacheResponse) Reset()         { *m = PingCacheResponse{} }
func (m *PingCacheResponse) String() string { return proto.CompactTextString(m) }
func (*PingCacheResponse) ProtoMessage()    {}
func (*PingCacheResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8335fd15ee4dfbe0, []int{3}
}
func (m *PingCacheResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PingCacheResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PingCacheResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PingCacheResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PingCacheResponse.Merge(m, src)
}
func (m *PingCacheResponse) XXX_Size() int {
	return m.Size()
}
func (m *PingCacheResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PingCacheResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PingCacheResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*EscrowOfferRequest)(nil), "ccmsg.EscrowOfferRequest")
	proto.RegisterType((*EscrowOfferResponse)(nil), "ccmsg.EscrowOfferResponse")
	proto.RegisterType((*PingCacheRequest)(nil), "ccmsg.PingCacheRequest")
	proto.RegisterType((*PingCacheResponse)(nil), "ccmsg.PingCacheResponse")
}

func init() { proto.RegisterFile("publisher_cache.proto", fileDescriptor_8335fd15ee4dfbe0) }

var fileDescriptor_8335fd15ee4dfbe0 = []byte{
	// 387 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0x51, 0xae, 0xd2, 0x40,
	0x14, 0x86, 0xef, 0x5c, 0x2f, 0x57, 0x7a, 0x50, 0x82, 0x83, 0xc4, 0x5a, 0x63, 0x21, 0x4d, 0x4c,
	0xfa, 0x62, 0x49, 0x74, 0x03, 0x8a, 0xd1, 0xc4, 0x10, 0x23, 0xe9, 0x06, 0x9a, 0x76, 0x66, 0x28,
	0x0d, 0xd0, 0xa9, 0x33, 0x53, 0x0d, 0x3b, 0x31, 0xae, 0xc6, 0x47, 0x1f, 0x5d, 0x82, 0xc1, 0x8d,
	0x98, 0x9e, 0x29, 0x20, 0xe2, 0x5b, 0xe7, 0xfb, 0xff, 0xfe, 0xfd, 0xcf, 0x9c, 0xc2, 0xa8, 0xaa,
	0xb3, 0x4d, 0xa1, 0x57, 0x42, 0x25, 0x2c, 0x65, 0x2b, 0x11, 0x55, 0x4a, 0x1a, 0x49, 0x3b, 0x8c,
	0x6d, 0x75, 0xee, 0x3d, 0xcf, 0x0b, 0xb3, 0xaa, 0xb3, 0x88, 0xc9, 0xed, 0x34, 0x97, 0xb9, 0x9c,
	0xa2, 0x9a, 0xd5, 0x4b, 0x3c, 0xe1, 0x01, 0x9f, 0xec, 0x5b, 0xc1, 0xf7, 0x6b, 0xa0, 0x6f, 0x35,
	0x53, 0xf2, 0xcb, 0xc7, 0xe5, 0x52, 0xa8, 0x58, 0x7c, 0xaa, 0x85, 0x36, 0xf4, 0x09, 0x38, 0x02,
	0x69, 0x52, 0x70, 0x97, 0x4c, 0x48, 0x78, 0x2f, 0xee, 0x5a, 0xf0, 0x9e, 0xd3, 0x10, 0x06, 0x45,
	0x59, 0x0a, 0x95, 0x6c, 0x53, 0x6d, 0x84, 0x4a, 0xd6, 0x62, 0xe7, 0x5e, 0xa3, 0xa7, 0x8f, 0xfc,
	0x03, 0xe2, 0xb9, 0xd8, 0x35, 0x4e, 0x59, 0x9b, 0x73, 0xe7, 0x1d, 0xeb, 0x44, 0x7e, 0x72, 0x3e,
	0x84, 0x8e, 0xde, 0x48, 0xa3, 0xdd, 0x9b, 0x09, 0x09, 0x6f, 0x62, 0x7b, 0xa0, 0xcf, 0xa0, 0x7f,
	0x1a, 0x36, 0xe5, 0x5c, 0xb9, 0x9d, 0x09, 0x09, 0x9d, 0xf8, 0xfe, 0x91, 0xbe, 0xe6, 0x5c, 0xd1,
	0x31, 0xf4, 0xb4, 0x49, 0x95, 0x49, 0xb2, 0x8d, 0x64, 0x6b, 0xf7, 0x16, 0x23, 0x00, 0xd1, 0xac,
	0x21, 0x38, 0x4e, 0xc9, 0x5b, 0xf9, 0x2e, 0xca, 0x5d, 0x51, 0x72, 0x2b, 0x3e, 0x05, 0xc0, 0x38,
	0x86, 0xf5, 0xba, 0x58, 0xcf, 0xb1, 0xa4, 0x69, 0x36, 0x86, 0x5e, 0xa5, 0x8a, 0xcf, 0xa9, 0x11,
	0xa8, 0x3b, 0xa8, 0x43, 0x8b, 0xe6, 0x62, 0x17, 0x8c, 0x60, 0x78, 0x76, 0x83, 0xba, 0x92, 0xa5,
	0x16, 0x01, 0x85, 0xc1, 0xa2, 0x28, 0xf3, 0x37, 0xcd, 0x8a, 0xda, 0x6b, 0x0d, 0x86, 0xf0, 0xe0,
	0x2f, 0x66, 0x8d, 0x2f, 0xbe, 0x11, 0xe8, 0x2f, 0x0e, 0xf3, 0xa0, 0x44, 0xdf, 0x41, 0x0f, 0xc3,
	0x6c, 0x2e, 0x7d, 0x1c, 0xe1, 0x6e, 0xa3, 0xcb, 0x45, 0x79, 0xde, 0xff, 0xa4, 0xb6, 0xc1, 0x15,
	0x7d, 0x05, 0xce, 0xf1, 0x7b, 0xf4, 0x51, 0x6b, 0xfd, 0xb7, 0x95, 0xe7, 0x5e, 0x0a, 0x87, 0x84,
	0xd9, 0xe0, 0xc7, 0xde, 0x27, 0x3f, 0xf7, 0x3e, 0xf9, 0xb5, 0xf7, 0xc9, 0xd7, 0xdf, 0xfe, 0x55,
	0x76, 0x8b, 0x3f, 0xce, 0xcb, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xd7, 0xc9, 0x54, 0xa9, 0x87,
	0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PublisherCacheClient is the client API for PublisherCache service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PublisherCacheClient interface {
	OfferEscrow(ctx context.Context, in *EscrowOfferRequest, opts ...grpc.CallOption) (*EscrowOfferResponse, error)
	PingCache(ctx context.Context, in *PingCacheRequest, opts ...grpc.CallOption) (*PingCacheResponse, error)
}

type publisherCacheClient struct {
	cc *grpc.ClientConn
}

func NewPublisherCacheClient(cc *grpc.ClientConn) PublisherCacheClient {
	return &publisherCacheClient{cc}
}

func (c *publisherCacheClient) OfferEscrow(ctx context.Context, in *EscrowOfferRequest, opts ...grpc.CallOption) (*EscrowOfferResponse, error) {
	out := new(EscrowOfferResponse)
	err := c.cc.Invoke(ctx, "/ccmsg.PublisherCache/OfferEscrow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publisherCacheClient) PingCache(ctx context.Context, in *PingCacheRequest, opts ...grpc.CallOption) (*PingCacheResponse, error) {
	out := new(PingCacheResponse)
	err := c.cc.Invoke(ctx, "/ccmsg.PublisherCache/PingCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PublisherCacheServer is the server API for PublisherCache service.
type PublisherCacheServer interface {
	OfferEscrow(context.Context, *EscrowOfferRequest) (*EscrowOfferResponse, error)
	PingCache(context.Context, *PingCacheRequest) (*PingCacheResponse, error)
}

func RegisterPublisherCacheServer(s *grpc.Server, srv PublisherCacheServer) {
	s.RegisterService(&_PublisherCache_serviceDesc, srv)
}

func _PublisherCache_OfferEscrow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EscrowOfferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublisherCacheServer).OfferEscrow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ccmsg.PublisherCache/OfferEscrow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublisherCacheServer).OfferEscrow(ctx, req.(*EscrowOfferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublisherCache_PingCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingCacheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublisherCacheServer).PingCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ccmsg.PublisherCache/PingCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublisherCacheServer).PingCache(ctx, req.(*PingCacheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PublisherCache_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ccmsg.PublisherCache",
	HandlerType: (*PublisherCacheServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OfferEscrow",
			Handler:    _PublisherCache_OfferEscrow_Handler,
		},
		{
			MethodName: "PingCache",
			Handler:    _PublisherCache_PingCache_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "publisher_cache.proto",
}

func (m *EscrowOfferRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EscrowOfferRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.EscrowId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPublisherCache(dAtA, i, uint64(len(m.EscrowId)))
		i += copy(dAtA[i:], m.EscrowId)
	}
	if len(m.InnerMasterKey) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPublisherCache(dAtA, i, uint64(len(m.InnerMasterKey)))
		i += copy(dAtA[i:], m.InnerMasterKey)
	}
	if len(m.OuterMasterKey) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPublisherCache(dAtA, i, uint64(len(m.OuterMasterKey)))
		i += copy(dAtA[i:], m.OuterMasterKey)
	}
	if m.Slots != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPublisherCache(dAtA, i, uint64(m.Slots))
	}
	if len(m.PublisherAddr) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintPublisherCache(dAtA, i, uint64(len(m.PublisherAddr)))
		i += copy(dAtA[i:], m.PublisherAddr)
	}
	if m.StartBlock != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintPublisherCache(dAtA, i, uint64(m.StartBlock))
	}
	if m.EndBlock != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintPublisherCache(dAtA, i, uint64(m.EndBlock))
	}
	if len(m.PublicKey) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintPublisherCache(dAtA, i, uint64(len(m.PublicKey)))
		i += copy(dAtA[i:], m.PublicKey)
	}
	if len(m.PrivateKey) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintPublisherCache(dAtA, i, uint64(len(m.PrivateKey)))
		i += copy(dAtA[i:], m.PrivateKey)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *EscrowOfferResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EscrowOfferResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PingCacheRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PingCacheRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PingCacheResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PingCacheResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintPublisherCache(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *EscrowOfferRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.EscrowId)
	if l > 0 {
		n += 1 + l + sovPublisherCache(uint64(l))
	}
	l = len(m.InnerMasterKey)
	if l > 0 {
		n += 1 + l + sovPublisherCache(uint64(l))
	}
	l = len(m.OuterMasterKey)
	if l > 0 {
		n += 1 + l + sovPublisherCache(uint64(l))
	}
	if m.Slots != 0 {
		n += 1 + sovPublisherCache(uint64(m.Slots))
	}
	l = len(m.PublisherAddr)
	if l > 0 {
		n += 1 + l + sovPublisherCache(uint64(l))
	}
	if m.StartBlock != 0 {
		n += 1 + sovPublisherCache(uint64(m.StartBlock))
	}
	if m.EndBlock != 0 {
		n += 1 + sovPublisherCache(uint64(m.EndBlock))
	}
	l = len(m.PublicKey)
	if l > 0 {
		n += 1 + l + sovPublisherCache(uint64(l))
	}
	l = len(m.PrivateKey)
	if l > 0 {
		n += 1 + l + sovPublisherCache(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EscrowOfferResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PingCacheRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PingCacheResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovPublisherCache(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozPublisherCache(x uint64) (n int) {
	return sovPublisherCache(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EscrowOfferRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublisherCache
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EscrowOfferRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EscrowOfferRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EscrowId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublisherCache
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPublisherCache
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPublisherCache
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EscrowId = append(m.EscrowId[:0], dAtA[iNdEx:postIndex]...)
			if m.EscrowId == nil {
				m.EscrowId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InnerMasterKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublisherCache
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPublisherCache
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPublisherCache
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InnerMasterKey = append(m.InnerMasterKey[:0], dAtA[iNdEx:postIndex]...)
			if m.InnerMasterKey == nil {
				m.InnerMasterKey = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OuterMasterKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublisherCache
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPublisherCache
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPublisherCache
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OuterMasterKey = append(m.OuterMasterKey[:0], dAtA[iNdEx:postIndex]...)
			if m.OuterMasterKey == nil {
				m.OuterMasterKey = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slots", wireType)
			}
			m.Slots = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublisherCache
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Slots |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublisherAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublisherCache
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublisherCache
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublisherCache
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublisherAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartBlock", wireType)
			}
			m.StartBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublisherCache
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartBlock |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndBlock", wireType)
			}
			m.EndBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublisherCache
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndBlock |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublisherCache
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPublisherCache
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPublisherCache
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = append(m.PublicKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PublicKey == nil {
				m.PublicKey = []byte{}
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivateKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublisherCache
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPublisherCache
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPublisherCache
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrivateKey = append(m.PrivateKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PrivateKey == nil {
				m.PrivateKey = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublisherCache(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublisherCache
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublisherCache
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EscrowOfferResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublisherCache
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EscrowOfferResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EscrowOfferResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPublisherCache(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublisherCache
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublisherCache
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PingCacheRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublisherCache
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PingCacheRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PingCacheRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPublisherCache(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublisherCache
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublisherCache
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PingCacheResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublisherCache
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PingCacheResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PingCacheResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPublisherCache(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublisherCache
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublisherCache
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPublisherCache(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPublisherCache
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPublisherCache
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPublisherCache
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPublisherCache
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthPublisherCache
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPublisherCache
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPublisherCache(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthPublisherCache
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPublisherCache = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPublisherCache   = fmt.Errorf("proto: integer overflow")
)
