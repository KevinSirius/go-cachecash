// +build sqlboiler_test

// Code generated by SQLBoiler 3.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testUtxos(t *testing.T) {
	t.Parallel()

	query := Utxos()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testUtxosDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Utxo{}
	if err = randomize.Struct(seed, o, utxoDBTypes, true, utxoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Utxo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Utxos().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUtxosQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Utxo{}
	if err = randomize.Struct(seed, o, utxoDBTypes, true, utxoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Utxo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Utxos().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Utxos().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUtxosSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Utxo{}
	if err = randomize.Struct(seed, o, utxoDBTypes, true, utxoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Utxo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := UtxoSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Utxos().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUtxosExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Utxo{}
	if err = randomize.Struct(seed, o, utxoDBTypes, true, utxoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Utxo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := UtxoExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Utxo exists: %s", err)
	}
	if !e {
		t.Errorf("Expected UtxoExists to return true, but got false.")
	}
}

func testUtxosFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Utxo{}
	if err = randomize.Struct(seed, o, utxoDBTypes, true, utxoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Utxo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	utxoFound, err := FindUtxo(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if utxoFound == nil {
		t.Error("want a record, got nil")
	}
}

func testUtxosBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Utxo{}
	if err = randomize.Struct(seed, o, utxoDBTypes, true, utxoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Utxo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Utxos().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testUtxosOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Utxo{}
	if err = randomize.Struct(seed, o, utxoDBTypes, true, utxoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Utxo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Utxos().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testUtxosAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	utxoOne := &Utxo{}
	utxoTwo := &Utxo{}
	if err = randomize.Struct(seed, utxoOne, utxoDBTypes, false, utxoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Utxo struct: %s", err)
	}
	if err = randomize.Struct(seed, utxoTwo, utxoDBTypes, false, utxoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Utxo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = utxoOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = utxoTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Utxos().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testUtxosCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	utxoOne := &Utxo{}
	utxoTwo := &Utxo{}
	if err = randomize.Struct(seed, utxoOne, utxoDBTypes, false, utxoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Utxo struct: %s", err)
	}
	if err = randomize.Struct(seed, utxoTwo, utxoDBTypes, false, utxoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Utxo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = utxoOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = utxoTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Utxos().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func utxoBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Utxo) error {
	*o = Utxo{}
	return nil
}

func utxoAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Utxo) error {
	*o = Utxo{}
	return nil
}

func utxoAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Utxo) error {
	*o = Utxo{}
	return nil
}

func utxoBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Utxo) error {
	*o = Utxo{}
	return nil
}

func utxoAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Utxo) error {
	*o = Utxo{}
	return nil
}

func utxoBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Utxo) error {
	*o = Utxo{}
	return nil
}

func utxoAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Utxo) error {
	*o = Utxo{}
	return nil
}

func utxoBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Utxo) error {
	*o = Utxo{}
	return nil
}

func utxoAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Utxo) error {
	*o = Utxo{}
	return nil
}

func testUtxosHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Utxo{}
	o := &Utxo{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, utxoDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Utxo object: %s", err)
	}

	AddUtxoHook(boil.BeforeInsertHook, utxoBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	utxoBeforeInsertHooks = []UtxoHook{}

	AddUtxoHook(boil.AfterInsertHook, utxoAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	utxoAfterInsertHooks = []UtxoHook{}

	AddUtxoHook(boil.AfterSelectHook, utxoAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	utxoAfterSelectHooks = []UtxoHook{}

	AddUtxoHook(boil.BeforeUpdateHook, utxoBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	utxoBeforeUpdateHooks = []UtxoHook{}

	AddUtxoHook(boil.AfterUpdateHook, utxoAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	utxoAfterUpdateHooks = []UtxoHook{}

	AddUtxoHook(boil.BeforeDeleteHook, utxoBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	utxoBeforeDeleteHooks = []UtxoHook{}

	AddUtxoHook(boil.AfterDeleteHook, utxoAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	utxoAfterDeleteHooks = []UtxoHook{}

	AddUtxoHook(boil.BeforeUpsertHook, utxoBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	utxoBeforeUpsertHooks = []UtxoHook{}

	AddUtxoHook(boil.AfterUpsertHook, utxoAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	utxoAfterUpsertHooks = []UtxoHook{}
}

func testUtxosInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Utxo{}
	if err = randomize.Struct(seed, o, utxoDBTypes, true, utxoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Utxo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Utxos().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUtxosInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Utxo{}
	if err = randomize.Struct(seed, o, utxoDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Utxo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(utxoColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Utxos().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUtxosReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Utxo{}
	if err = randomize.Struct(seed, o, utxoDBTypes, true, utxoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Utxo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testUtxosReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Utxo{}
	if err = randomize.Struct(seed, o, utxoDBTypes, true, utxoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Utxo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := UtxoSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testUtxosSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Utxo{}
	if err = randomize.Struct(seed, o, utxoDBTypes, true, utxoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Utxo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Utxos().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	utxoDBTypes = map[string]string{`ID`: `INTEGER`, `Txid`: `BYTEA`, `Idx`: `INTEGER`, `Amount`: `INTEGER`, `ScriptPubkey`: `BYTEA`}
	_           = bytes.MinRead
)

func testUtxosUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(utxoPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(utxoAllColumns) == len(utxoPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Utxo{}
	if err = randomize.Struct(seed, o, utxoDBTypes, true, utxoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Utxo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Utxos().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, utxoDBTypes, true, utxoPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Utxo struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testUtxosSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(utxoAllColumns) == len(utxoPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Utxo{}
	if err = randomize.Struct(seed, o, utxoDBTypes, true, utxoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Utxo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Utxos().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, utxoDBTypes, true, utxoPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Utxo struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(utxoAllColumns, utxoPrimaryKeyColumns) {
		fields = utxoAllColumns
	} else {
		fields = strmangle.SetComplement(
			utxoAllColumns,
			utxoPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := UtxoSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}
