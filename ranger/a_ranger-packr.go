// Code generated by github.com/gobuffalo/packr. DO NOT EDIT.

package ranger

import "github.com/gobuffalo/packr"

// You can use the "packr clean" command to clean up this,
// and any other packr generated files.
func init() {
	_ = packr.PackJSONBytes("./templates", "fuzz.gotmpl", "\"Ly8gK2J1aWxkIHJhbmdlcnRlc3QKCnBhY2thZ2Uge3sgLlBhY2thZ2UgfX0KCmltcG9ydCAoCgkiZm10IgoJInJlZmxlY3QiCikKCmZ1bmMgRnV6eihkYXRhIFtdYnl0ZSkgaW50IHsKCWlmIGxlbihkYXRhKSA8IDIgewoJCXJldHVybiAwCgl9CgoJc3dpdGNoIGludChkYXRhWzBdKSV7eyBzaXplIH19ewoJe3sgJGkgOj0gMCB9fQoJe3sgcmFuZ2UgJHR5cGVrZXksICR0eXBlIDo9IC5UeXBlcyAtfX0KCXt7IGlmIG5vdCAuSXNJbnRlcmZhY2UgfX0KCWNhc2Uge3sgJGkgfX06CgkJb2Jqe3sgJHR5cGVrZXkgfX0gOj0gJnt7ICR0eXBla2V5IH19e30KCQlfLCBlcnIgOj0gb2Jqe3sgJHR5cGVrZXkgfX0uVW5tYXJzaGFsRnJvbShkYXRhWzE6XSkKCQlpZiBlcnIgIT0gbmlsIHsKCQkJcmV0dXJuIDAKCQl9CgkJZGF0YXt7ICR0eXBla2V5IH19LCBlcnIgOj0gb2Jqe3sgJHR5cGVrZXkgfX0uTWFyc2hhbCgpCgkJaWYgZXJyICE9IG5pbCB7CgkJCXBhbmljKGVycikKCQl9CgoJCW9iant7ICR0eXBla2V5IH19MiA6PSAme3sgJHR5cGVrZXkgfX17fQoJCV8sIGVyciA9IG9iant7ICR0eXBla2V5IH19Mi5Vbm1hcnNoYWxGcm9tKGRhdGF7eyAkdHlwZWtleSB9fSkKCQlpZiBlcnIgIT0gbmlsIHsKCQkJcGFuaWMoZXJyKQoJCX0KCgkJaWYgIXJlZmxlY3QuRGVlcEVxdWFsKG9iant7ICR0eXBla2V5IH19LCBvYmp7eyAkdHlwZWtleSB9fTIpIHsKCQkJcGFuaWMoZm10LlNwcmludGYoIm9iaiAlVCBub3QgZXF1YWwiLCBvYmp7eyAkdHlwZWtleSB9fSkpCgkJfQoKCQl7ey0gJGkgPSAoYWRkICRpIDEpIH19Cgl7e2VuZH19e3sgZW5kIC19fQoJfQoKCXJldHVybiAxCn0K\"")
	_ = packr.PackJSONBytes("./templates", "go.gotmpl", "\"\"")
	_ = packr.PackJSONBytes("./templates", "marshaltostruct.gotmpl", "\"ewogICAgbiArPSBiaW5hcnkuUHV0VXZhcmludChkYXRhW246XSwgdWludDY0KHt7LldyaXRlU3ltYm9sTmFtZX19LlNpemUoKSkpCgluaSwgZXJyIDo9IHt7LldyaXRlU3ltYm9sTmFtZX19Lk1hcnNoYWxUbyhkYXRhW246bit7ey5Xcml0ZVN5bWJvbE5hbWV9fS5TaXplKCldKQoJaWYgZXJyICE9IG5pbCB7CgkJcmV0dXJuIDAsIGVycm9ycy5XcmFwKGVyciwgInt7IC5RdWFsTmFtZSB9fSIpCgl9CgluICs9IG5pCn0=\"")
	_ = packr.PackJSONBytes("./templates", "readstring.gotmpl", "\"ewoJaUwsIG5pIDo9IGJpbmFyeS5VdmFyaW50KGRhdGFbbjpdKQoJaWYgbmkgPD0gMCB7CgkJcmV0dXJuIDAsIGVycm9ycy5XcmFwKHJhbmdlci5FcnJTaG9ydFJlYWQsICJPYnRhaW5pbmcgbGVuZ3RoIG9mIHt7IC5USS5RdWFsTmFtZSB9fSIpCgl9CgluICs9IG5pCiAgICB7eyBpZiAuVEkuR2V0TGVuZ3RoIH19CiAgICBpZiBpTCAhPSB7eyAuVEkuR2V0TGVuZ3RoIH19IHsKCQlyZXR1cm4gMCwgZXJyb3JzLldyYXAocmFuZ2VyLkVyckxlbmd0aE1pc21hdGNoLCAie3sgLlRJLlF1YWxOYW1lIH19IikKCX0KICAgIHt7ZW5kfX0KCXt7IGlmIC5USS5HZXRNYXhMZW5ndGggfX0KCWlmIGlMID4ge3sgLlRJLkdldE1heExlbmd0aCB9fSB7CgkJcmV0dXJuIDAsIGVycm9ycy5XcmFwKHJhbmdlci5FcnJUb29NYW55LCAie3sgLlRJLlF1YWxOYW1lIH19IikKCX0KCXt7IGVuZCB9fQoKCWlmIGlMID4gdWludDY0KGxlbihkYXRhW246XSkpIHsKCQlyZXR1cm4gMCwgZXJyb3JzLldyYXAocmFuZ2VyLkVyclNob3J0UmVhZCwgInt7IC5USS5RdWFsTmFtZSB9fSIpCgl9CgoJYnl0IDo9IG1ha2UoW11ieXRlLCBpTCkKCW4gKz0gY29weShieXQsIGRhdGFbbjp1aW50NjQobikraUxdKQogICAge3sgLlRJLlJlYWRTeW1ib2xOYW1lIH19ID0ge3suQ2FzdH19KGJ5dCkKfQ==\"")
	_ = packr.PackJSONBytes("./templates", "readuvarint.gotmpl", "\"ewogICAgaUwsIG5pIDo9IGJpbmFyeS5VdmFyaW50KGRhdGFbbjpdKQogICAgaWYgbmkgPD0gMCB7CiAgICAgICAgcmV0dXJuIDAsIGVycm9ycy5XcmFwKHJhbmdlci5FcnJTaG9ydFJlYWQsICJ7eyAuUXVhbE5hbWUgfX0iKQogICAgfQogICAgaWYgaUwgJiB7eyAuTWFzayB9fSAhPSBpTCB7CgkJcmV0dXJuIDAsIGVycm9ycy5XcmFwKHJhbmdlci5FcnJUb29MYXJnZSwgInt7IC5RdWFsTmFtZSB9fSIpCgl9CiAgICB7eyAuU3ltYm9sTmFtZSB9fSA9IHt7IC5DYXN0IH19KGlMKQogICAgbiArPSBuaQp9\"")
	_ = packr.PackJSONBytes("./templates", "test.gotmpl", "\"Ly8gK2J1aWxkIHJhbmdlcnRlc3QKCnBhY2thZ2Uge3sgLlBhY2thZ2UgfX0KCmltcG9ydCAoCgkiZW5jb2RpbmcvaGV4IgoJImZtdCIKCSJtYXRoIgoJIm1hdGgvcmFuZCIKCSJyZWZsZWN0IgoJInRlc3RpbmciCgkidGltZSIKCgkiZ2l0aHViLmNvbS9wa2cvZXJyb3JzIgoJImdpdGh1Yi5jb20vc3RyZXRjaHIvdGVzdGlmeS9hc3NlcnQiCikKCmZ1bmMgZ2VuUmFuZG9tKG4gaW50KSBbXWJ5dGUgewoJZGF0YSA6PSBtYWtlKFtdYnl0ZSwgbikKCW4yLCBlcnIgOj0gcmFuZC5SZWFkKGRhdGEpCglpZiBlcnIgIT0gbmlsIHsKCQlwYW5pYyhlcnJvcnMuV3JhcChlcnIsICJyYW5kLlJlYWQiKSkKCX0KCglpZiBuICE9IG4yIHsKCQlwYW5pYyhlcnJvcnMuV3JhcChlcnIsICJzaG9ydCByZWFkIGluIHJhbmQuUmVhZCIpKQoJfQoKCXJldHVybiBkYXRhWzpuXQp9Cgp7eyByYW5nZSAkdHlwZWtleSwgJHR5cGUgOj0gLlR5cGVzIC19fQp7eyBpZiBub3QgLklzSW50ZXJmYWNlfX0KZnVuYyBUZXN0e3sgJHR5cGVrZXkgfX1NYXJzaGFsVW5tYXJzaGFsWmVyb1ZhbHVlKHQgKnRlc3RpbmcuVCkgewoJb2JqIDo9ICZ7eyAkdHlwZWtleSB9fXsKCQl7eyByYW5nZSAkaW5uZXJ2YWx1ZSA6PSAkdHlwZS5GaWVsZHMgLX19e3stIHdpdGggJGlubmVya2V5IDo9ICRpbm5lcnZhbHVlLkZpZWxkTmFtZSAtfX0KICAgIHt7LSBpZiAoaXNNYXJzaGFsYWJsZSAkaW5uZXJ2YWx1ZSkgfX0KCQl7eyAkaW5uZXJrZXkgfX06ICB7eyAkLkRlZmF1bHRWYWx1ZUZvciAkaW5uZXJ2YWx1ZSB9fSwKCQl7ey0gZW5kIC19fQoJCXt7LSBlbmQgLX19CgkJe3stIGVuZCAtfX0KCX0KCglvYmoyIDo9ICZ7eyAkdHlwZWtleSB9fXsKCQl7eyByYW5nZSAkaW5uZXJ2YWx1ZSA6PSAkdHlwZS5GaWVsZHMgLX19e3stIHdpdGggJGlubmVya2V5IDo9ICRpbm5lcnZhbHVlLkZpZWxkTmFtZSAtfX0KICAgIHt7LSBpZiAoaXNNYXJzaGFsYWJsZSAkaW5uZXJ2YWx1ZSkgfX0KCQl7eyAkaW5uZXJrZXkgfX06IHt7ICQuRGVmYXVsdFZhbHVlRm9yICRpbm5lcnZhbHVlIH19LAoJCXt7LSBlbmQgLX19CgkJe3stIGVuZCAtfX0KCQl7ey0gZW5kIC19fQoJfQoKCWRhdGEsIGVyciA6PSBvYmouTWFyc2hhbCgpCglhc3NlcnQuTmlsKHQsIGVyciwgIm1hcnNoYWwgZmFpbGVkIGZvciB7eyAkdHlwZWtleSB9fSIpCglhc3NlcnQuRXF1YWwodCwgbGVuKGRhdGEpLCBvYmouU2l6ZSgpLCAie3sgJHR5cGVrZXkgfX0gc2l6ZSBjaGVjayBvbiB6ZXJvIHZhbHVlIikKCWFzc2VydC5OaWwodCwgb2JqMi5Vbm1hcnNoYWwoZGF0YSksICJ7eyAkdHlwZWtleSB9fSB6ZXJvIHZhbHVlIHVubWFyc2hhbCB0ZXN0IikKCWFzc2VydC5FcXVhbCh0LCBvYmosIG9iajIsICJ7eyAkdHlwZWtleSB9fSB1bm1hcnNoYWwgZXF1YWxpdHkgdGVzdCIpCglvYmoyID0gJnt7ICR0eXBla2V5IH19ewoJCXt7IHJhbmdlICRpbm5lcnZhbHVlIDo9ICR0eXBlLkZpZWxkcyAtfX17ey0gd2l0aCAkaW5uZXJrZXkgOj0gJGlubmVydmFsdWUuRmllbGROYW1lIC19fQogICAge3stIGlmIChpc01hcnNoYWxhYmxlICRpbm5lcnZhbHVlKSB9fQoJCXt7ICRpbm5lcmtleSB9fToge3sgJC5EZWZhdWx0VmFsdWVGb3IgJGlubmVydmFsdWUgfX0sCgkJe3stIGVuZCAtfX0KCQl7ey0gZW5kIC19fQoJCXt7LSBlbmQgLX19Cgl9CglsLCBlcnIgOj0gb2JqMi5Vbm1hcnNoYWxGcm9tKGRhdGEpCglhc3NlcnQuTmlsKHQsIGVyciwgInt7ICR0eXBla2V5IH19IHVubWFyc2hhbGZyb20gZmFpbGVkIikKCWFzc2VydC5FcXVhbCh0LCBvYmosIG9iajIsICJ7eyAkdHlwZWtleSB9fSB1bm1hcnNoYWxmcm9tIGVxdWFsaXR5IHRlc3QiKQoJYXNzZXJ0LkVxdWFsKHQsIGxlbihkYXRhKSwgbCwgInt7ICR0eXBla2V5IH19IGRhdGEgbGVuZ3RoIGNoZWNrIikKCWFzc2VydC5FcXVhbCh0LCBvYmouU2l6ZSgpLCBsLCAie3sgJHR5cGVrZXkgfX0gZGF0YSBzaXplIGNoZWNrIikKfQoKZnVuYyBUZXN0e3sgJHR5cGVrZXkgfX1NYXJzaGFsVW5tYXJzaGFsUmFuZG9tRGF0YSh0ICp0ZXN0aW5nLlQpIHsKCXNlZWQgOj0gdGltZS5Ob3coKS5Vbml4KCkKCWZtdC5QcmludGYoIlNlZWQgaXMgJXZcbiIsIHNlZWQpCglyYW5kLlNlZWQoc2VlZCkKCglmb3IgaSA6PSAwOyBpIDwgMTAwOyBpKysgewoJCW9iaiA6PSAme3sgJHR5cGVrZXkgfX17fQoJCXt7IHJhbmdlICRpbm5lcnZhbHVlIDo9ICR0eXBlLkZpZWxkcyAtfX17ey0gd2l0aCAkaW5uZXJrZXkgOj0gJGlubmVydmFsdWUuRmllbGROYW1lIC19fQogICAge3stIGlmIChpc01hcnNoYWxhYmxlICRpbm5lcnZhbHVlKSB9fQoJCW9iai57eyAkaW5uZXJrZXkgfX0gPSB7eyByYW5kb21GaWVsZCAkaW5uZXJ2YWx1ZSB9fQoJCXt7IGVuZCB9fQoJCXt7IGVuZCB9fQoJCXt7IGVuZCB9fQoKCQlvYmoyIDo9ICZ7eyAkdHlwZWtleSB9fXt9CgoJCWRhdGEsIGVyciA6PSBvYmouTWFyc2hhbCgpCgkJYXNzZXJ0Lk5pbCh0LCBlcnIsICJtYXJzaGFsIGZhaWxlZCBmb3Ige3sgJHR5cGVrZXkgfX0iKQoJCWFzc2VydC5FcXVhbCh0LCBsZW4oZGF0YSksIG9iai5TaXplKCksICJ7eyAkdHlwZWtleSB9fSBzaXplIGNoZWNrIG9uIHJhbmRvbSB2YWx1ZXMiKQoJCWFzc2VydC5OaWwodCwgb2JqMi5Vbm1hcnNoYWwoZGF0YSksICJ7eyAkdHlwZWtleSB9fSByYW5kb20gdmFsdWVzIHVubWFyc2hhbCB0ZXN0IikKCQlhc3NlcnQuRXF1YWwodCwgb2JqLCBvYmoyLCAie3sgJHR5cGVrZXkgfX0gdW5tYXJzaGFsIGVxdWFsaXR5IHRlc3QiKQoKCQlvYmoyID0gJnt7ICR0eXBla2V5IH19e30KCgkJbCwgZXJyIDo9IG9iajIuVW5tYXJzaGFsRnJvbShkYXRhKQoJCWFzc2VydC5OaWwodCwgZXJyLCBmbXQuU3ByaW50Zigie3sgJHR5cGVrZXkgfX0gdW5tYXJzaGFsZnJvbSBmYWlsZWQ6ICVxIiwgaGV4LkVuY29kZVRvU3RyaW5nKGRhdGEpKSkKCQlhc3NlcnQuRXF1YWwodCwgb2JqLCBvYmoyLCAie3sgJHR5cGVrZXkgfX0gdW5tYXJzaGFsZnJvbSBlcXVhbGl0eSB0ZXN0IikKCQlhc3NlcnQuRXF1YWwodCwgbGVuKGRhdGEpLCBsLCAie3sgJHR5cGVrZXkgfX0gZGF0YSBsZW5ndGggY2hlY2siKQoJCWFzc2VydC5FcXVhbCh0LCBvYmouU2l6ZSgpLCBsLCAie3sgJHR5cGVrZXkgfX0gZGF0YSBzaXplIGNoZWNrIikKCgkJYXNzZXJ0LlRydWUodCwgcmVmbGVjdC5EZWVwRXF1YWwob2JqLCBvYmoyKSkKCX0KfQp7e2VuZH19e3sgZW5kIC19fQo=\"")
}
