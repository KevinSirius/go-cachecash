// Code generated by github.com/gobuffalo/packr. DO NOT EDIT.

package templates

import "github.com/gobuffalo/packr"

// You can use the "packr clean" command to clean up this,
// and any other packr generated files.
func init() {
	_ = packr.PackJSONBytes(".", "fuzz.gotmpl", "\"Ly8gK2J1aWxkIHJhbmdlcnRlc3QKCnBhY2thZ2Uge3sgLlBhY2thZ2UgfX0KCmltcG9ydCAoCgkiZm10IgoJInJlZmxlY3QiCikKCmZ1bmMgRnV6eihkYXRhIFtdYnl0ZSkgaW50IHsKCWlmIGxlbihkYXRhKSA8IDIgewoJCXJldHVybiAwCgl9CgoJc3dpdGNoIGludChkYXRhWzBdKSV7eyBzaXplIH19ewoJe3sgJGkgOj0gMCB9fQoJe3sgcmFuZ2UgJHR5cGVrZXksICR0eXBlIDo9IC5UeXBlcyAtfX0KCWNhc2Uge3sgJGkgfX06CgkJb2Jqe3sgJHR5cGVrZXkgfX0gOj0gJnt7ICR0eXBla2V5IH19e30KCQlfLCBlcnIgOj0gb2Jqe3sgJHR5cGVrZXkgfX0uVW5tYXJzaGFsRnJvbShkYXRhWzE6XSkKCQlpZiBlcnIgIT0gbmlsIHsKCQkJcmV0dXJuIDAKCQl9CgkJZGF0YXt7ICR0eXBla2V5IH19LCBlcnIgOj0gb2Jqe3sgJHR5cGVrZXkgfX0uTWFyc2hhbCgpCgkJaWYgZXJyICE9IG5pbCB7CgkJCXBhbmljKGVycikKCQl9CgoJCW9iant7ICR0eXBla2V5IH19MiA6PSAme3sgJHR5cGVrZXkgfX17fQoJCV8sIGVyciA9IG9iant7ICR0eXBla2V5IH19Mi5Vbm1hcnNoYWxGcm9tKGRhdGF7eyAkdHlwZWtleSB9fSkKCQlpZiBlcnIgIT0gbmlsIHsKCQkJcGFuaWMoZXJyKQoJCX0KCgkJaWYgIXJlZmxlY3QuRGVlcEVxdWFsKG9iant7ICR0eXBla2V5IH19LCBvYmp7eyAkdHlwZWtleSB9fTIpIHsKCQkJcGFuaWMoZm10LlNwcmludGYoIm9iaiAlVCBub3QgZXF1YWwiLCBvYmp7eyAkdHlwZWtleSB9fSkpCgkJfQoKCQl7ey0gJGkgPSAoYWRkICRpIDEpIH19Cgl7eyBlbmQgLX19Cgl9CgoJcmV0dXJuIDEKfQo=\"")
	_ = packr.PackJSONBytes(".", "gen.go", "\"cGFja2FnZSB0ZW1wbGF0ZXMKCi8vZ286Z2VuZXJhdGUgcGFja3IgLXYKCmltcG9ydCAiZ2l0aHViLmNvbS9nb2J1ZmZhbG8vcGFja3IiCgp2YXIgYm94ID0gcGFja3IuTmV3Qm94KCIuIikK\"")
	_ = packr.PackJSONBytes(".", "go.gotmpl", "\"\"")
	_ = packr.PackJSONBytes(".", "templates.go", "\"cGFja2FnZSB0ZW1wbGF0ZXMKCi8vIEdldCBpcyBhIHNob3J0IHdyYXBwZXIgZm9yIGBwYWNrci5Cb3guRmluZCgpYCBzbyB3ZSBkb24ndCBoYXZlIHRvIGV4cG9zZSB0aGUKLy8gYm94LiBBbHNvIGNhc3RzIHRvIHN0cmluZyBzaW5jZSB3ZSBhbHdheXMgbmVlZCB0aGF0LgpmdW5jIEdldChuYW1lIHN0cmluZykgKHN0cmluZywgZXJyb3IpIHsKCWJ5dCwgZXJyIDo9IGJveC5GaW5kKG5hbWUpCglyZXR1cm4gc3RyaW5nKGJ5dCksIGVycgp9Cg==\"")
	_ = packr.PackJSONBytes(".", "test.gotmpl", "\"Ly8gK2J1aWxkIHJhbmdlcnRlc3QKCnBhY2thZ2Uge3sgLlBhY2thZ2UgfX0KCmltcG9ydCAoCgkiZW5jb2RpbmcvaGV4IgoJImZtdCIKCSJtYXRoIgoJIm1hdGgvcmFuZCIKCSJyZWZsZWN0IgoJInRlc3RpbmciCgkidGltZSIKCgkiZ2l0aHViLmNvbS9wa2cvZXJyb3JzIgoJImdpdGh1Yi5jb20vc3RyZXRjaHIvdGVzdGlmeS9hc3NlcnQiCikKCmZ1bmMgZ2VuUmFuZG9tKG4gaW50KSBbXWJ5dGUgewoJZGF0YSA6PSBtYWtlKFtdYnl0ZSwgbikKCW4yLCBlcnIgOj0gcmFuZC5SZWFkKGRhdGEpCglpZiBlcnIgIT0gbmlsIHsKCQlwYW5pYyhlcnJvcnMuV3JhcChlcnIsICJyYW5kLlJlYWQiKSkKCX0KCglpZiBuICE9IG4yIHsKCQlwYW5pYyhlcnJvcnMuV3JhcChlcnIsICJzaG9ydCByZWFkIGluIHJhbmQuUmVhZCIpKQoJfQoKCXJldHVybiBkYXRhWzpuXQp9Cgp7eyByYW5nZSAkdHlwZWtleSwgJHR5cGUgOj0gLlR5cGVzIC19fQpmdW5jIFRlc3R7eyAkdHlwZWtleSB9fU1hcnNoYWxVbm1hcnNoYWxaZXJvVmFsdWUodCAqdGVzdGluZy5UKSB7CglvYmogOj0gJnt7ICR0eXBla2V5IH19ewoJCXt7IHJhbmdlICRmb28sICRtYXAgOj0gJHR5cGUuRmllbGRzIC19fQoJCXt7IHJhbmdlICRpbm5lcmtleSwgJGlubmVydmFsdWUgOj0gJG1hcCAtfX0KICAgIHt7LSBpZiAoaXNNYXJzaGFsYWJsZSAkaW5uZXJ2YWx1ZSkgfX0KCQl7eyAkaW5uZXJrZXkgfX06ICB7eyB6ZXJvVmFsdWUgJGlubmVydmFsdWUuU3RydWN0dXJlVHlwZSAkaW5uZXJ2YWx1ZS5WYWx1ZVR5cGUgJGlubmVydmFsdWUuUmVxdWlyZS5MZW5ndGggJGlubmVydmFsdWUuSW50ZXJmYWNlIH19LAoJCXt7LSBlbmQgLX19CgkJe3stIGVuZCAtfX0KCQl7ey0gZW5kIC19fQoJfQoKCW9iajIgOj0gJnt7ICR0eXBla2V5IH19ewoJCXt7IHJhbmdlICRmb28sICRtYXAgOj0gJHR5cGUuRmllbGRzIC19fQoJCXt7IHJhbmdlICRpbm5lcmtleSwgJGlubmVydmFsdWUgOj0gJG1hcCAtfX0KICAgIHt7LSBpZiAoaXNNYXJzaGFsYWJsZSAkaW5uZXJ2YWx1ZSkgfX0KCQl7eyAkaW5uZXJrZXkgfX06IHt7IHplcm9WYWx1ZSAkaW5uZXJ2YWx1ZS5TdHJ1Y3R1cmVUeXBlICRpbm5lcnZhbHVlLlZhbHVlVHlwZSAkaW5uZXJ2YWx1ZS5SZXF1aXJlLkxlbmd0aCAkaW5uZXJ2YWx1ZS5JbnRlcmZhY2UgfX0sCgkJe3stIGVuZCAtfX0KCQl7ey0gZW5kIC19fQoJCXt7LSBlbmQgLX19Cgl9CgoJZGF0YSwgZXJyIDo9IG9iai5NYXJzaGFsKCkKCWFzc2VydC5OaWwodCwgZXJyLCAibWFyc2hhbCBmYWlsZWQgZm9yIHt7ICR0eXBla2V5IH19IikKCWFzc2VydC5FcXVhbCh0LCBsZW4oZGF0YSksIG9iai5TaXplKCksICJ7eyAkdHlwZWtleSB9fSBzaXplIGNoZWNrIG9uIHplcm8gdmFsdWUiKQoJYXNzZXJ0Lk5pbCh0LCBvYmoyLlVubWFyc2hhbChkYXRhKSwgInt7ICR0eXBla2V5IH19IHplcm8gdmFsdWUgdW5tYXJzaGFsIHRlc3QiKQoJYXNzZXJ0LkVxdWFsKHQsIG9iaiwgb2JqMiwgInt7ICR0eXBla2V5IH19IHVubWFyc2hhbCBlcXVhbGl0eSB0ZXN0IikKCW9iajIgPSAme3sgJHR5cGVrZXkgfX17CgkJe3sgcmFuZ2UgJGZvbywgJG1hcCA6PSAkdHlwZS5GaWVsZHMgLX19CgkJe3sgcmFuZ2UgJGlubmVya2V5LCAkaW5uZXJ2YWx1ZSA6PSAkbWFwIC19fQogICAge3stIGlmIChpc01hcnNoYWxhYmxlICRpbm5lcnZhbHVlKSB9fQoJCXt7ICRpbm5lcmtleSB9fToge3sgemVyb1ZhbHVlICRpbm5lcnZhbHVlLlN0cnVjdHVyZVR5cGUgJGlubmVydmFsdWUuVmFsdWVUeXBlICRpbm5lcnZhbHVlLlJlcXVpcmUuTGVuZ3RoICRpbm5lcnZhbHVlLkludGVyZmFjZSB9fSwKCQl7ey0gZW5kIC19fQoJCXt7LSBlbmQgLX19CgkJe3stIGVuZCAtfX0KCX0KCWwsIGVyciA6PSBvYmoyLlVubWFyc2hhbEZyb20oZGF0YSkKCWFzc2VydC5OaWwodCwgZXJyLCAie3sgJHR5cGVrZXkgfX0gdW5tYXJzaGFsZnJvbSBmYWlsZWQiKQoJYXNzZXJ0LkVxdWFsKHQsIG9iaiwgb2JqMiwgInt7ICR0eXBla2V5IH19IHVubWFyc2hhbGZyb20gZXF1YWxpdHkgdGVzdCIpCglhc3NlcnQuRXF1YWwodCwgbGVuKGRhdGEpLCBsLCAie3sgJHR5cGVrZXkgfX0gZGF0YSBsZW5ndGggY2hlY2siKQoJYXNzZXJ0LkVxdWFsKHQsIG9iai5TaXplKCksIGwsICJ7eyAkdHlwZWtleSB9fSBkYXRhIHNpemUgY2hlY2siKQp9CgpmdW5jIFRlc3R7eyAkdHlwZWtleSB9fU1hcnNoYWxVbm1hcnNoYWxSYW5kb21EYXRhKHQgKnRlc3RpbmcuVCkgewoJc2VlZCA6PSB0aW1lLk5vdygpLlVuaXgoKQoJZm10LlByaW50ZigiU2VlZCBpcyAldlxuIiwgc2VlZCkKCXJhbmQuU2VlZChzZWVkKQoKCWZvciBpIDo9IDA7IGkgPCAxMDA7IGkrKyB7CgkJb2JqIDo9ICZ7eyAkdHlwZWtleSB9fXt9CgkJe3sgcmFuZ2UgJGZvbywgJG1hcCA6PSAkdHlwZS5GaWVsZHMgLX19CgkJe3sgcmFuZ2UgJGlubmVya2V5LCAkaW5uZXJ2YWx1ZSA6PSAkbWFwIC19fQogICAge3stIGlmIChpc01hcnNoYWxhYmxlICRpbm5lcnZhbHVlKSB9fQoJCW9iai57eyAkaW5uZXJrZXkgfX0gPSB7eyByYW5kb21GaWVsZCAkaW5uZXJ2YWx1ZSB9fQoJCXt7IGVuZCB9fQoJCXt7IGVuZCB9fQoJCXt7IGVuZCB9fQoKCQlvYmoyIDo9ICZ7eyAkdHlwZWtleSB9fXt9CgoJCWRhdGEsIGVyciA6PSBvYmouTWFyc2hhbCgpCgkJYXNzZXJ0Lk5pbCh0LCBlcnIsICJtYXJzaGFsIGZhaWxlZCBmb3Ige3sgJHR5cGVrZXkgfX0iKQoJCWFzc2VydC5FcXVhbCh0LCBsZW4oZGF0YSksIG9iai5TaXplKCksICJ7eyAkdHlwZWtleSB9fSBzaXplIGNoZWNrIG9uIHJhbmRvbSB2YWx1ZXMiKQoJCWFzc2VydC5OaWwodCwgb2JqMi5Vbm1hcnNoYWwoZGF0YSksICJ7eyAkdHlwZWtleSB9fSByYW5kb20gdmFsdWVzIHVubWFyc2hhbCB0ZXN0IikKCQlhc3NlcnQuRXF1YWwodCwgb2JqLCBvYmoyLCAie3sgJHR5cGVrZXkgfX0gdW5tYXJzaGFsIGVxdWFsaXR5IHRlc3QiKQoKCQlvYmoyID0gJnt7ICR0eXBla2V5IH19e30KCgkJbCwgZXJyIDo9IG9iajIuVW5tYXJzaGFsRnJvbShkYXRhKQoJCWFzc2VydC5OaWwodCwgZXJyLCBmbXQuU3ByaW50Zigie3sgJHR5cGVrZXkgfX0gdW5tYXJzaGFsZnJvbSBmYWlsZWQ6ICVxIiwgaGV4LkVuY29kZVRvU3RyaW5nKGRhdGEpKSkKCQlhc3NlcnQuRXF1YWwodCwgb2JqLCBvYmoyLCAie3sgJHR5cGVrZXkgfX0gdW5tYXJzaGFsZnJvbSBlcXVhbGl0eSB0ZXN0IikKCQlhc3NlcnQuRXF1YWwodCwgbGVuKGRhdGEpLCBsLCAie3sgJHR5cGVrZXkgfX0gZGF0YSBsZW5ndGggY2hlY2siKQoJCWFzc2VydC5FcXVhbCh0LCBvYmouU2l6ZSgpLCBsLCAie3sgJHR5cGVrZXkgfX0gZGF0YSBzaXplIGNoZWNrIikKCgkJYXNzZXJ0LlRydWUodCwgcmVmbGVjdC5EZWVwRXF1YWwob2JqLCBvYmoyKSkKCX0KfQp7eyBlbmQgLX19Cg==\"")
}
