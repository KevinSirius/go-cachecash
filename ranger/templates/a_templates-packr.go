// Code generated by github.com/gobuffalo/packr. DO NOT EDIT.

package templates

import "github.com/gobuffalo/packr"

// You can use the "packr clean" command to clean up this,
// and any other packr generated files.
func init() {
	_ = packr.PackJSONBytes(".", "fuzz.gotmpl", "\"Ly8gK2J1aWxkIHJhbmdlcnRlc3QKCnBhY2thZ2Uge3sgLlBhY2thZ2UgfX0KCmltcG9ydCAoCgkiZm10IgoJInJlZmxlY3QiCikKCmZ1bmMgRnV6eihkYXRhIFtdYnl0ZSkgaW50IHsKCWlmIGxlbihkYXRhKSA8IDIgewoJCXJldHVybiAwCgl9CgoJc3dpdGNoIGludChkYXRhWzBdKSV7eyBzaXplIH19ewoJe3sgJGkgOj0gMCB9fQoJe3sgcmFuZ2UgJHR5cGVrZXksICR0eXBlIDo9IC5UeXBlcyAtfX0KCWNhc2Uge3sgJGkgfX06CgkJb2Jqe3sgJHR5cGVrZXkgfX0gOj0gJnt7ICR0eXBla2V5IH19e30KCQlfLCBlcnIgOj0gb2Jqe3sgJHR5cGVrZXkgfX0uVW5tYXJzaGFsRnJvbShkYXRhWzE6XSkKCQlpZiBlcnIgIT0gbmlsIHsKCQkJcmV0dXJuIDAKCQl9CgkJZGF0YXt7ICR0eXBla2V5IH19LCBlcnIgOj0gb2Jqe3sgJHR5cGVrZXkgfX0uTWFyc2hhbCgpCgkJaWYgZXJyICE9IG5pbCB7CgkJCXBhbmljKGVycikKCQl9CgoJCW9iant7ICR0eXBla2V5IH19MiA6PSAme3sgJHR5cGVrZXkgfX17fQoJCV8sIGVyciA9IG9iant7ICR0eXBla2V5IH19Mi5Vbm1hcnNoYWxGcm9tKGRhdGF7eyAkdHlwZWtleSB9fSkKCQlpZiBlcnIgIT0gbmlsIHsKCQkJcGFuaWMoZXJyKQoJCX0KCgkJaWYgIXJlZmxlY3QuRGVlcEVxdWFsKG9iant7ICR0eXBla2V5IH19LCBvYmp7eyAkdHlwZWtleSB9fTIpIHsKCQkJcGFuaWMoZm10LlNwcmludGYoIm9iaiAlVCBub3QgZXF1YWwiLCBvYmp7eyAkdHlwZWtleSB9fSkpCgkJfQoKCQl7ey0gJGkgPSAoYWRkICRpIDEpIH19Cgl7eyBlbmQgLX19Cgl9CgoJcmV0dXJuIDEKfQo=\"")
	_ = packr.PackJSONBytes(".", "gen.go", "\"cGFja2FnZSB0ZW1wbGF0ZXMKCi8vZ286Z2VuZXJhdGUgcGFja3IgLXYKCmltcG9ydCAiZ2l0aHViLmNvbS9nb2J1ZmZhbG8vcGFja3IiCgp2YXIgYm94ID0gcGFja3IuTmV3Qm94KCIuIikK\"")
	_ = packr.PackJSONBytes(".", "go.gotmpl", "\"\"")
	_ = packr.PackJSONBytes(".", "templates.go", "\"cGFja2FnZSB0ZW1wbGF0ZXMKCi8vIEdldCBpcyBhIHNob3J0IHdyYXBwZXIgZm9yIGBwYWNrci5Cb3guRmluZCgpYCBzbyB3ZSBkb24ndCBoYXZlIHRvIGV4cG9zZSB0aGUKLy8gYm94LiBBbHNvIGNhc3RzIHRvIHN0cmluZyBzaW5jZSB3ZSBhbHdheXMgbmVlZCB0aGF0LgpmdW5jIEdldChuYW1lIHN0cmluZykgKHN0cmluZywgZXJyb3IpIHsKCWJ5dCwgZXJyIDo9IGJveC5GaW5kKG5hbWUpCglyZXR1cm4gc3RyaW5nKGJ5dCksIGVycgp9Cg==\"")
	_ = packr.PackJSONBytes(".", "test.gotmpl", "\"Ly8gK2J1aWxkIHJhbmdlcnRlc3QKCnBhY2thZ2Uge3sgLlBhY2thZ2UgfX0KCmltcG9ydCAoCgkicmVmbGVjdCIKCSJ0ZXN0aW5nIgoJIm1hdGgvcmFuZCIKCSJ0aW1lIgoJImVuY29kaW5nL2hleCIKCSJmbXQiCgkiZ2l0aHViLmNvbS9wa2cvZXJyb3JzIgoKCSJnaXRodWIuY29tL3N0cmV0Y2hyL3Rlc3RpZnkvYXNzZXJ0IgopCgpmdW5jIGdlblJhbmRvbShuIGludCkgW11ieXRlIHsKCWRhdGEgOj0gbWFrZShbXWJ5dGUsIG4pCgluMiwgZXJyIDo9IHJhbmQuUmVhZChkYXRhKQoJaWYgZXJyICE9IG5pbCB7CgkJcGFuaWMoZXJyb3JzLldyYXAoZXJyLCAicmFuZC5SZWFkIikpCgl9CgoJaWYgbiAhPSBuMiB7CgkJcGFuaWMoZXJyb3JzLldyYXAoZXJyLCAic2hvcnQgcmVhZCBpbiByYW5kLlJlYWQiKSkKCX0KCglyZXR1cm4gZGF0YVs6bl0KfQoKe3sgcmFuZ2UgJHR5cGVrZXksICR0eXBlIDo9IC5UeXBlcyAtfX0KZnVuYyBUZXN0e3sgJHR5cGVrZXkgfX1NYXJzaGFsVW5tYXJzaGFsWmVyb1ZhbHVlKHQgKnRlc3RpbmcuVCkgewoJb2JqIDo9ICZ7eyAkdHlwZWtleSB9fXsKCQl7eyByYW5nZSAkZm9vLCAkbWFwIDo9ICR0eXBlLkZpZWxkcyAtfX0KCQl7eyByYW5nZSAkaW5uZXJrZXksICRpbm5lcnZhbHVlIDo9ICRtYXAgLX19CiAgICB7ey0gaWYgKGlzTWFyc2hhbGFibGUgJGlubmVydmFsdWUpIH19CgkJe3sgJGlubmVya2V5IH19OiAge3sgemVyb1ZhbHVlICRpbm5lcnZhbHVlLlN0cnVjdHVyZVR5cGUgJGlubmVydmFsdWUuVmFsdWVUeXBlICRpbm5lcnZhbHVlLlJlcXVpcmUuTGVuZ3RoICRpbm5lcnZhbHVlLkludGVyZmFjZSB9fSwKCQl7ey0gZW5kIC19fQoJCXt7LSBlbmQgLX19CgkJe3stIGVuZCAtfX0KCX0KCglvYmoyIDo9ICZ7eyAkdHlwZWtleSB9fXsKCQl7eyByYW5nZSAkZm9vLCAkbWFwIDo9ICR0eXBlLkZpZWxkcyAtfX0KCQl7eyByYW5nZSAkaW5uZXJrZXksICRpbm5lcnZhbHVlIDo9ICRtYXAgLX19CiAgICB7ey0gaWYgKGlzTWFyc2hhbGFibGUgJGlubmVydmFsdWUpIH19CgkJe3sgJGlubmVya2V5IH19OiB7eyB6ZXJvVmFsdWUgJGlubmVydmFsdWUuU3RydWN0dXJlVHlwZSAkaW5uZXJ2YWx1ZS5WYWx1ZVR5cGUgJGlubmVydmFsdWUuUmVxdWlyZS5MZW5ndGggJGlubmVydmFsdWUuSW50ZXJmYWNlIH19LAoJCXt7LSBlbmQgLX19CgkJe3stIGVuZCAtfX0KCQl7ey0gZW5kIC19fQoJfQoKCWRhdGEsIGVyciA6PSBvYmouTWFyc2hhbCgpCglhc3NlcnQuTmlsKHQsIGVyciwgIm1hcnNoYWwgZmFpbGVkIGZvciB7eyAkdHlwZWtleSB9fSIpCglhc3NlcnQuRXF1YWwodCwgbGVuKGRhdGEpLCBvYmouU2l6ZSgpLCAie3sgJHR5cGVrZXkgfX0gc2l6ZSBjaGVjayBvbiB6ZXJvIHZhbHVlIikKCWFzc2VydC5OaWwodCwgb2JqMi5Vbm1hcnNoYWwoZGF0YSksICJ7eyAkdHlwZWtleSB9fSB6ZXJvIHZhbHVlIHVubWFyc2hhbCB0ZXN0IikKCWFzc2VydC5FcXVhbCh0LCBvYmosIG9iajIsICJ7eyAkdHlwZWtleSB9fSB1bm1hcnNoYWwgZXF1YWxpdHkgdGVzdCIpCglvYmoyID0gJnt7ICR0eXBla2V5IH19ewoJCXt7IHJhbmdlICRmb28sICRtYXAgOj0gJHR5cGUuRmllbGRzIC19fQoJCXt7IHJhbmdlICRpbm5lcmtleSwgJGlubmVydmFsdWUgOj0gJG1hcCAtfX0KICAgIHt7LSBpZiAoaXNNYXJzaGFsYWJsZSAkaW5uZXJ2YWx1ZSkgfX0KCQl7eyAkaW5uZXJrZXkgfX06IHt7IHplcm9WYWx1ZSAkaW5uZXJ2YWx1ZS5TdHJ1Y3R1cmVUeXBlICRpbm5lcnZhbHVlLlZhbHVlVHlwZSAkaW5uZXJ2YWx1ZS5SZXF1aXJlLkxlbmd0aCAkaW5uZXJ2YWx1ZS5JbnRlcmZhY2UgfX0sCgkJe3stIGVuZCAtfX0KCQl7ey0gZW5kIC19fQoJCXt7LSBlbmQgLX19Cgl9CglsLCBlcnIgOj0gb2JqMi5Vbm1hcnNoYWxGcm9tKGRhdGEpCglhc3NlcnQuTmlsKHQsIGVyciwgInt7ICR0eXBla2V5IH19IHVubWFyc2hhbGZyb20gZmFpbGVkIikKCWFzc2VydC5FcXVhbCh0LCBvYmosIG9iajIsICJ7eyAkdHlwZWtleSB9fSB1bm1hcnNoYWxmcm9tIGVxdWFsaXR5IHRlc3QiKQoJYXNzZXJ0LkVxdWFsKHQsIGxlbihkYXRhKSwgbCwgInt7ICR0eXBla2V5IH19IGRhdGEgbGVuZ3RoIGNoZWNrIikKCWFzc2VydC5FcXVhbCh0LCBvYmouU2l6ZSgpLCBsLCAie3sgJHR5cGVrZXkgfX0gZGF0YSBzaXplIGNoZWNrIikKfQoKZnVuYyBUZXN0e3sgJHR5cGVrZXkgfX1NYXJzaGFsVW5tYXJzaGFsUmFuZG9tRGF0YSh0ICp0ZXN0aW5nLlQpIHsKCXNlZWQgOj0gdGltZS5Ob3coKS5Vbml4KCkKCWZtdC5QcmludGYoIlNlZWQgaXMgJXZcbiIsIHNlZWQpCglyYW5kLlNlZWQoc2VlZCkKCglmb3IgaSA6PSAwOyBpIDwgMTAwOyBpKysgewoJCW9iaiA6PSAme3sgJHR5cGVrZXkgfX17fQoJCXt7IHJhbmdlICRmb28sICRtYXAgOj0gJHR5cGUuRmllbGRzIC19fQoJCXt7IHJhbmdlICRpbm5lcmtleSwgJGlubmVydmFsdWUgOj0gJG1hcCAtfX0KICAgIHt7LSBpZiAoaXNNYXJzaGFsYWJsZSAkaW5uZXJ2YWx1ZSkgfX0KCQlvYmoue3sgJGlubmVya2V5IH19ID0ge3sgcmFuZG9tRmllbGQgJGlubmVydmFsdWUgfX0KCQl7eyBlbmQgfX0KCQl7eyBlbmQgfX0KCQl7eyBlbmQgfX0KCgkJb2JqMiA6PSAme3sgJHR5cGVrZXkgfX17fQoKCQlkYXRhLCBlcnIgOj0gb2JqLk1hcnNoYWwoKQoJCWFzc2VydC5OaWwodCwgZXJyLCAibWFyc2hhbCBmYWlsZWQgZm9yIHt7ICR0eXBla2V5IH19IikKCQlhc3NlcnQuRXF1YWwodCwgbGVuKGRhdGEpLCBvYmouU2l6ZSgpLCAie3sgJHR5cGVrZXkgfX0gc2l6ZSBjaGVjayBvbiByYW5kb20gdmFsdWVzIikKCQlhc3NlcnQuTmlsKHQsIG9iajIuVW5tYXJzaGFsKGRhdGEpLCAie3sgJHR5cGVrZXkgfX0gcmFuZG9tIHZhbHVlcyB1bm1hcnNoYWwgdGVzdCIpCgkJYXNzZXJ0LkVxdWFsKHQsIG9iaiwgb2JqMiwgInt7ICR0eXBla2V5IH19IHVubWFyc2hhbCBlcXVhbGl0eSB0ZXN0IikKCgkJb2JqMiA9ICZ7eyAkdHlwZWtleSB9fXt9CgoJCWwsIGVyciA6PSBvYmoyLlVubWFyc2hhbEZyb20oZGF0YSkKCQlhc3NlcnQuTmlsKHQsIGVyciwgZm10LlNwcmludGYoInt7ICR0eXBla2V5IH19IHVubWFyc2hhbGZyb20gZmFpbGVkOiAlcSIsIGhleC5FbmNvZGVUb1N0cmluZyhkYXRhKSkpCgkJYXNzZXJ0LkVxdWFsKHQsIG9iaiwgb2JqMiwgInt7ICR0eXBla2V5IH19IHVubWFyc2hhbGZyb20gZXF1YWxpdHkgdGVzdCIpCgkJYXNzZXJ0LkVxdWFsKHQsIGxlbihkYXRhKSwgbCwgInt7ICR0eXBla2V5IH19IGRhdGEgbGVuZ3RoIGNoZWNrIikKCQlhc3NlcnQuRXF1YWwodCwgb2JqLlNpemUoKSwgbCwgInt7ICR0eXBla2V5IH19IGRhdGEgc2l6ZSBjaGVjayIpCgoJCWFzc2VydC5UcnVlKHQsIHJlZmxlY3QuRGVlcEVxdWFsKG9iaiwgb2JqMikpCgl9Cn0Ke3sgZW5kIC19fQo=\"")
}
