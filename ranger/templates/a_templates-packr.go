// Code generated by github.com/gobuffalo/packr. DO NOT EDIT.

package templates

import "github.com/gobuffalo/packr"

// You can use the "packr clean" command to clean up this,
// and any other packr generated files.
func init() {
	_ = packr.PackJSONBytes(".", "fuzz.gotmpl", "\"Ly8gK2J1aWxkIHJhbmdlcnRlc3QKCnBhY2thZ2Uge3sgLlBhY2thZ2UgfX0KCmltcG9ydCAoCgkiZm10IgoJInJlZmxlY3QiCikKCmZ1bmMgRnV6eihkYXRhIFtdYnl0ZSkgaW50IHsKCWlmIGxlbihkYXRhKSA8IDIgewoJCXJldHVybiAwCgl9CgoJc3dpdGNoIGludChkYXRhWzBdKSV7eyBzaXplIH19ewoJe3sgJGkgOj0gMCB9fQoJe3sgcmFuZ2UgJHR5cGVrZXksICR0eXBlIDo9IC5UeXBlcyAtfX0KCWNhc2Uge3sgJGkgfX06CgkJb2Jqe3sgJHR5cGVrZXkgfX0gOj0gJnt7ICR0eXBla2V5IH19e30KCQlfLCBlcnIgOj0gb2Jqe3sgJHR5cGVrZXkgfX0uVW5tYXJzaGFsRnJvbShkYXRhWzE6XSkKCQlpZiBlcnIgIT0gbmlsIHsKCQkJcmV0dXJuIDAKCQl9CgkJZGF0YXt7ICR0eXBla2V5IH19LCBlcnIgOj0gb2Jqe3sgJHR5cGVrZXkgfX0uTWFyc2hhbCgpCgkJaWYgZXJyICE9IG5pbCB7CgkJCXBhbmljKGVycikKCQl9CgoJCW9iant7ICR0eXBla2V5IH19MiA6PSAme3sgJHR5cGVrZXkgfX17fQoJCV8sIGVyciA9IG9iant7ICR0eXBla2V5IH19Mi5Vbm1hcnNoYWxGcm9tKGRhdGF7eyAkdHlwZWtleSB9fSkKCQlpZiBlcnIgIT0gbmlsIHsKCQkJcGFuaWMoZXJyKQoJCX0KCgkJaWYgIXJlZmxlY3QuRGVlcEVxdWFsKG9iant7ICR0eXBla2V5IH19LCBvYmp7eyAkdHlwZWtleSB9fTIpIHsKCQkJcGFuaWMoZm10LlNwcmludGYoIm9iaiAlVCBub3QgZXF1YWwiLCBvYmp7eyAkdHlwZWtleSB9fSkpCgkJfQoKCQl7ey0gJGkgPSAoYWRkICRpIDEpIH19Cgl7eyBlbmQgLX19Cgl9CgoJcmV0dXJuIDEKfQo=\"")
	_ = packr.PackJSONBytes(".", "gen.go", "\"cGFja2FnZSB0ZW1wbGF0ZXMKCi8vZ286Z2VuZXJhdGUgcGFja3IgLXYKCmltcG9ydCAiZ2l0aHViLmNvbS9nb2J1ZmZhbG8vcGFja3IiCgp2YXIgYm94ID0gcGFja3IuTmV3Qm94KCIuIikK\"")
	_ = packr.PackJSONBytes(".", "go.gotmpl", "\"\"")
	_ = packr.PackJSONBytes(".", "templates.go", "\"cGFja2FnZSB0ZW1wbGF0ZXMKCi8vIEdldCBpcyBhIHNob3J0IHdyYXBwZXIgZm9yIGBwYWNrci5Cb3guRmluZCgpYCBzbyB3ZSBkb24ndCBoYXZlIHRvIGV4cG9zZSB0aGUKLy8gYm94LiBBbHNvIGNhc3RzIHRvIHN0cmluZyBzaW5jZSB3ZSBhbHdheXMgbmVlZCB0aGF0LgpmdW5jIEdldChuYW1lIHN0cmluZykgKHN0cmluZywgZXJyb3IpIHsKCWJ5dCwgZXJyIDo9IGJveC5GaW5kKG5hbWUpCglyZXR1cm4gc3RyaW5nKGJ5dCksIGVycgp9Cg==\"")
	_ = packr.PackJSONBytes(".", "test.gotmpl", "\"Ly8gK2J1aWxkIHJhbmdlcnRlc3QKCnBhY2thZ2Uge3sgLlBhY2thZ2UgfX0KCmltcG9ydCAoCgkiZW5jb2RpbmcvaGV4IgoJImZtdCIKCSJtYXRoIgoJIm1hdGgvcmFuZCIKCSJyZWZsZWN0IgoJInRlc3RpbmciCgkidGltZSIKCgkiZ2l0aHViLmNvbS9wa2cvZXJyb3JzIgoJImdpdGh1Yi5jb20vc3RyZXRjaHIvdGVzdGlmeS9hc3NlcnQiCikKCmZ1bmMgZ2VuUmFuZG9tKG4gaW50KSBbXWJ5dGUgewoJZGF0YSA6PSBtYWtlKFtdYnl0ZSwgbikKCW4yLCBlcnIgOj0gcmFuZC5SZWFkKGRhdGEpCglpZiBlcnIgIT0gbmlsIHsKCQlwYW5pYyhlcnJvcnMuV3JhcChlcnIsICJyYW5kLlJlYWQiKSkKCX0KCglpZiBuICE9IG4yIHsKCQlwYW5pYyhlcnJvcnMuV3JhcChlcnIsICJzaG9ydCByZWFkIGluIHJhbmQuUmVhZCIpKQoJfQoKCXJldHVybiBkYXRhWzpuXQp9Cgp7eyByYW5nZSAkdHlwZWtleSwgJHR5cGUgOj0gLlR5cGVzIC19fQpmdW5jIFRlc3R7eyAkdHlwZWtleSB9fU1hcnNoYWxVbm1hcnNoYWxaZXJvVmFsdWUodCAqdGVzdGluZy5UKSB7CglvYmogOj0gJnt7ICR0eXBla2V5IH19ewoJCXt7IHJhbmdlICRpbm5lcnZhbHVlIDo9ICR0eXBlLkZpZWxkcyAtfX17ey0gd2l0aCAkaW5uZXJrZXkgOj0gJGlubmVydmFsdWUuRmllbGROYW1lIC19fQogICAge3stIGlmIChpc01hcnNoYWxhYmxlICRpbm5lcnZhbHVlKSB9fQoJCXt7ICRpbm5lcmtleSB9fTogIHt7IHplcm9WYWx1ZSAkaW5uZXJ2YWx1ZS5TdHJ1Y3R1cmVUeXBlICRpbm5lcnZhbHVlLlZhbHVlVHlwZSAkaW5uZXJ2YWx1ZS5SZXF1aXJlLkxlbmd0aCAkaW5uZXJ2YWx1ZS5JbnRlcmZhY2UgfX0sCgkJe3stIGVuZCAtfX0KCQl7ey0gZW5kIC19fQoJCXt7LSBlbmQgLX19Cgl9CgoJb2JqMiA6PSAme3sgJHR5cGVrZXkgfX17CgkJe3sgcmFuZ2UgJGlubmVydmFsdWUgOj0gJHR5cGUuRmllbGRzIC19fXt7LSB3aXRoICRpbm5lcmtleSA6PSAkaW5uZXJ2YWx1ZS5GaWVsZE5hbWUgLX19CiAgICB7ey0gaWYgKGlzTWFyc2hhbGFibGUgJGlubmVydmFsdWUpIH19CgkJe3sgJGlubmVya2V5IH19OiB7eyB6ZXJvVmFsdWUgJGlubmVydmFsdWUuU3RydWN0dXJlVHlwZSAkaW5uZXJ2YWx1ZS5WYWx1ZVR5cGUgJGlubmVydmFsdWUuUmVxdWlyZS5MZW5ndGggJGlubmVydmFsdWUuSW50ZXJmYWNlIH19LAoJCXt7LSBlbmQgLX19CgkJe3stIGVuZCAtfX0KCQl7ey0gZW5kIC19fQoJfQoKCWRhdGEsIGVyciA6PSBvYmouTWFyc2hhbCgpCglhc3NlcnQuTmlsKHQsIGVyciwgIm1hcnNoYWwgZmFpbGVkIGZvciB7eyAkdHlwZWtleSB9fSIpCglhc3NlcnQuRXF1YWwodCwgbGVuKGRhdGEpLCBvYmouU2l6ZSgpLCAie3sgJHR5cGVrZXkgfX0gc2l6ZSBjaGVjayBvbiB6ZXJvIHZhbHVlIikKCWFzc2VydC5OaWwodCwgb2JqMi5Vbm1hcnNoYWwoZGF0YSksICJ7eyAkdHlwZWtleSB9fSB6ZXJvIHZhbHVlIHVubWFyc2hhbCB0ZXN0IikKCWFzc2VydC5FcXVhbCh0LCBvYmosIG9iajIsICJ7eyAkdHlwZWtleSB9fSB1bm1hcnNoYWwgZXF1YWxpdHkgdGVzdCIpCglvYmoyID0gJnt7ICR0eXBla2V5IH19ewoJCXt7IHJhbmdlICRpbm5lcnZhbHVlIDo9ICR0eXBlLkZpZWxkcyAtfX17ey0gd2l0aCAkaW5uZXJrZXkgOj0gJGlubmVydmFsdWUuRmllbGROYW1lIC19fQogICAge3stIGlmIChpc01hcnNoYWxhYmxlICRpbm5lcnZhbHVlKSB9fQoJCXt7ICRpbm5lcmtleSB9fToge3sgemVyb1ZhbHVlICRpbm5lcnZhbHVlLlN0cnVjdHVyZVR5cGUgJGlubmVydmFsdWUuVmFsdWVUeXBlICRpbm5lcnZhbHVlLlJlcXVpcmUuTGVuZ3RoICRpbm5lcnZhbHVlLkludGVyZmFjZSB9fSwKCQl7ey0gZW5kIC19fQoJCXt7LSBlbmQgLX19CgkJe3stIGVuZCAtfX0KCX0KCWwsIGVyciA6PSBvYmoyLlVubWFyc2hhbEZyb20oZGF0YSkKCWFzc2VydC5OaWwodCwgZXJyLCAie3sgJHR5cGVrZXkgfX0gdW5tYXJzaGFsZnJvbSBmYWlsZWQiKQoJYXNzZXJ0LkVxdWFsKHQsIG9iaiwgb2JqMiwgInt7ICR0eXBla2V5IH19IHVubWFyc2hhbGZyb20gZXF1YWxpdHkgdGVzdCIpCglhc3NlcnQuRXF1YWwodCwgbGVuKGRhdGEpLCBsLCAie3sgJHR5cGVrZXkgfX0gZGF0YSBsZW5ndGggY2hlY2siKQoJYXNzZXJ0LkVxdWFsKHQsIG9iai5TaXplKCksIGwsICJ7eyAkdHlwZWtleSB9fSBkYXRhIHNpemUgY2hlY2siKQp9CgpmdW5jIFRlc3R7eyAkdHlwZWtleSB9fU1hcnNoYWxVbm1hcnNoYWxSYW5kb21EYXRhKHQgKnRlc3RpbmcuVCkgewoJc2VlZCA6PSB0aW1lLk5vdygpLlVuaXgoKQoJZm10LlByaW50ZigiU2VlZCBpcyAldlxuIiwgc2VlZCkKCXJhbmQuU2VlZChzZWVkKQoKCWZvciBpIDo9IDA7IGkgPCAxMDA7IGkrKyB7CgkJb2JqIDo9ICZ7eyAkdHlwZWtleSB9fXt9CgkJe3sgcmFuZ2UgJGlubmVydmFsdWUgOj0gJHR5cGUuRmllbGRzIC19fXt7LSB3aXRoICRpbm5lcmtleSA6PSAkaW5uZXJ2YWx1ZS5GaWVsZE5hbWUgLX19CiAgICB7ey0gaWYgKGlzTWFyc2hhbGFibGUgJGlubmVydmFsdWUpIH19CgkJb2JqLnt7ICRpbm5lcmtleSB9fSA9IHt7IHJhbmRvbUZpZWxkICRpbm5lcnZhbHVlIH19CgkJe3sgZW5kIH19CgkJe3sgZW5kIH19CgkJe3sgZW5kIH19CgoJCW9iajIgOj0gJnt7ICR0eXBla2V5IH19e30KCgkJZGF0YSwgZXJyIDo9IG9iai5NYXJzaGFsKCkKCQlhc3NlcnQuTmlsKHQsIGVyciwgIm1hcnNoYWwgZmFpbGVkIGZvciB7eyAkdHlwZWtleSB9fSIpCgkJYXNzZXJ0LkVxdWFsKHQsIGxlbihkYXRhKSwgb2JqLlNpemUoKSwgInt7ICR0eXBla2V5IH19IHNpemUgY2hlY2sgb24gcmFuZG9tIHZhbHVlcyIpCgkJYXNzZXJ0Lk5pbCh0LCBvYmoyLlVubWFyc2hhbChkYXRhKSwgInt7ICR0eXBla2V5IH19IHJhbmRvbSB2YWx1ZXMgdW5tYXJzaGFsIHRlc3QiKQoJCWFzc2VydC5FcXVhbCh0LCBvYmosIG9iajIsICJ7eyAkdHlwZWtleSB9fSB1bm1hcnNoYWwgZXF1YWxpdHkgdGVzdCIpCgoJCW9iajIgPSAme3sgJHR5cGVrZXkgfX17fQoKCQlsLCBlcnIgOj0gb2JqMi5Vbm1hcnNoYWxGcm9tKGRhdGEpCgkJYXNzZXJ0Lk5pbCh0LCBlcnIsIGZtdC5TcHJpbnRmKCJ7eyAkdHlwZWtleSB9fSB1bm1hcnNoYWxmcm9tIGZhaWxlZDogJXEiLCBoZXguRW5jb2RlVG9TdHJpbmcoZGF0YSkpKQoJCWFzc2VydC5FcXVhbCh0LCBvYmosIG9iajIsICJ7eyAkdHlwZWtleSB9fSB1bm1hcnNoYWxmcm9tIGVxdWFsaXR5IHRlc3QiKQoJCWFzc2VydC5FcXVhbCh0LCBsZW4oZGF0YSksIGwsICJ7eyAkdHlwZWtleSB9fSBkYXRhIGxlbmd0aCBjaGVjayIpCgkJYXNzZXJ0LkVxdWFsKHQsIG9iai5TaXplKCksIGwsICJ7eyAkdHlwZWtleSB9fSBkYXRhIHNpemUgY2hlY2siKQoKCQlhc3NlcnQuVHJ1ZSh0LCByZWZsZWN0LkRlZXBFcXVhbChvYmosIG9iajIpKQoJfQp9Cnt7IGVuZCAtfX0K\"")
}
